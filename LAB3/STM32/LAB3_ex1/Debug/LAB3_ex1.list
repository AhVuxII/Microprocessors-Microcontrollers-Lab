
LAB3_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003478  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a8  080035a8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080035a8  080035a8  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a8  080035a8  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080035b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000004c  080035fc  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080035fc  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dd9  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc7  00000000  00000000  00029e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002c638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170f1  00000000  00000000  0002d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb18  00000000  00000000  00044131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082798  00000000  00000000  00050c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d33e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b5c  00000000  00000000  000d3434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800356c 	.word	0x0800356c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	0800356c 	.word	0x0800356c

0800014c <toggleLEDs>:
 *  Created on: Oct 10, 2025
 *      Author: WINDOWS10
 */

#include "fsm_modify.h"
void toggleLEDs(int mode) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	3b02      	subs	r3, #2
 8000158:	2b05      	cmp	r3, #5
 800015a:	d82d      	bhi.n	80001b8 <toggleLEDs+0x6c>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <toggleLEDs+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000187 	.word	0x08000187
 800016c:	08000191 	.word	0x08000191
 8000170:	0800019b 	.word	0x0800019b
 8000174:	080001a5 	.word	0x080001a5
 8000178:	080001af 	.word	0x080001af
    switch (mode) {
        case 2: toggleRed1(); toggleRed2(); break;
 800017c:	f000 ff1e 	bl	8000fbc <toggleRed1>
 8000180:	f000 ff3a 	bl	8000ff8 <toggleRed2>
 8000184:	e018      	b.n	80001b8 <toggleLEDs+0x6c>
        case 3: toggleYellow1(); toggleYellow2(); break;
 8000186:	f000 ff23 	bl	8000fd0 <toggleYellow1>
 800018a:	f000 ff3f 	bl	800100c <toggleYellow2>
 800018e:	e013      	b.n	80001b8 <toggleLEDs+0x6c>
        case 4: toggleGreen1(); toggleGreen2(); break;
 8000190:	f000 ff28 	bl	8000fe4 <toggleGreen1>
 8000194:	f000 ff44 	bl	8001020 <toggleGreen2>
 8000198:	e00e      	b.n	80001b8 <toggleLEDs+0x6c>
        case 5: toggleRed1(); toggleRed2(); break; // RED2_MODIFY
 800019a:	f000 ff0f 	bl	8000fbc <toggleRed1>
 800019e:	f000 ff2b 	bl	8000ff8 <toggleRed2>
 80001a2:	e009      	b.n	80001b8 <toggleLEDs+0x6c>
        case 6: toggleYellow1(); toggleYellow2(); break; // YELLOW2_MODIFY
 80001a4:	f000 ff14 	bl	8000fd0 <toggleYellow1>
 80001a8:	f000 ff30 	bl	800100c <toggleYellow2>
 80001ac:	e004      	b.n	80001b8 <toggleLEDs+0x6c>
        case 7: toggleGreen1(); toggleGreen2(); break; // GREEN2_MODIFY
 80001ae:	f000 ff19 	bl	8000fe4 <toggleGreen1>
 80001b2:	f000 ff35 	bl	8001020 <toggleGreen2>
 80001b6:	bf00      	nop
    }
}
 80001b8:	bf00      	nop
 80001ba:	3708      	adds	r7, #8
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}

080001c0 <fsm_modify>:

void fsm_modify(){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	switch(status3){
 80001c4:	4bad      	ldr	r3, [pc, #692]	; (800047c <fsm_modify+0x2bc>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	3b0c      	subs	r3, #12
 80001ca:	2b06      	cmp	r3, #6
 80001cc:	f200 821c 	bhi.w	8000608 <fsm_modify+0x448>
 80001d0:	a201      	add	r2, pc, #4	; (adr r2, 80001d8 <fsm_modify+0x18>)
 80001d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d6:	bf00      	nop
 80001d8:	080001f5 	.word	0x080001f5
 80001dc:	08000297 	.word	0x08000297
 80001e0:	08000339 	.word	0x08000339
 80001e4:	080003db 	.word	0x080003db
 80001e8:	0800049d 	.word	0x0800049d
 80001ec:	0800053d 	.word	0x0800053d
 80001f0:	08000609 	.word	0x08000609
	case RED1_MODIFY:
		//set mode to display
		mode = 2;
 80001f4:	4ba2      	ldr	r3, [pc, #648]	; (8000480 <fsm_modify+0x2c0>)
 80001f6:	2202      	movs	r2, #2
 80001f8:	601a      	str	r2, [r3, #0]
		if(endTimer1()) {
 80001fa:	f001 fdf3 	bl	8001de4 <endTimer1>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d007      	beq.n	8000214 <fsm_modify+0x54>
			setTimer1(100);
 8000204:	2064      	movs	r0, #100	; 0x64
 8000206:	f001 fd21 	bl	8001c4c <setTimer1>
			toggleLEDs(mode);
 800020a:	4b9d      	ldr	r3, [pc, #628]	; (8000480 <fsm_modify+0x2c0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f7ff ff9c 	bl	800014c <toggleLEDs>
		}
		if(Press_button(SET_VALUE)) {
 8000214:	2002      	movs	r0, #2
 8000216:	f000 fe2d 	bl	8000e74 <Press_button>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d00e      	beq.n	800023e <fsm_modify+0x7e>
			clearLed();
 8000220:	f000 ff08 	bl	8001034 <clearLed>
			red1_duration = time_input * 100;
 8000224:	4b97      	ldr	r3, [pc, #604]	; (8000484 <fsm_modify+0x2c4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2264      	movs	r2, #100	; 0x64
 800022a:	fb02 f303 	mul.w	r3, r2, r3
 800022e:	4a96      	ldr	r2, [pc, #600]	; (8000488 <fsm_modify+0x2c8>)
 8000230:	6013      	str	r3, [r2, #0]
			time_input = 1;
 8000232:	4b94      	ldr	r3, [pc, #592]	; (8000484 <fsm_modify+0x2c4>)
 8000234:	2201      	movs	r2, #1
 8000236:	601a      	str	r2, [r3, #0]
			status3 = YELLOW1_MODIFY;
 8000238:	4b90      	ldr	r3, [pc, #576]	; (800047c <fsm_modify+0x2bc>)
 800023a:	220d      	movs	r2, #13
 800023c:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(SET_TIMER)) {
 800023e:	2001      	movs	r0, #1
 8000240:	f000 fe18 	bl	8000e74 <Press_button>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d015      	beq.n	8000276 <fsm_modify+0xb6>
			time_input = (time_input + 1) % 100;
 800024a:	4b8e      	ldr	r3, [pc, #568]	; (8000484 <fsm_modify+0x2c4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	4b8e      	ldr	r3, [pc, #568]	; (800048c <fsm_modify+0x2cc>)
 8000252:	fb83 1302 	smull	r1, r3, r3, r2
 8000256:	1159      	asrs	r1, r3, #5
 8000258:	17d3      	asrs	r3, r2, #31
 800025a:	1acb      	subs	r3, r1, r3
 800025c:	2164      	movs	r1, #100	; 0x64
 800025e:	fb01 f303 	mul.w	r3, r1, r3
 8000262:	1ad3      	subs	r3, r2, r3
 8000264:	4a87      	ldr	r2, [pc, #540]	; (8000484 <fsm_modify+0x2c4>)
 8000266:	6013      	str	r3, [r2, #0]
			if(time_input == 0) time_input = 1;
 8000268:	4b86      	ldr	r3, [pc, #536]	; (8000484 <fsm_modify+0x2c4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d102      	bne.n	8000276 <fsm_modify+0xb6>
 8000270:	4b84      	ldr	r3, [pc, #528]	; (8000484 <fsm_modify+0x2c4>)
 8000272:	2201      	movs	r2, #1
 8000274:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(CONTROL)){
 8000276:	2000      	movs	r0, #0
 8000278:	f000 fdfc 	bl	8000e74 <Press_button>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	f000 81c4 	beq.w	800060c <fsm_modify+0x44c>
			clearLed();
 8000284:	f000 fed6 	bl	8001034 <clearLed>
			time_input = 1;
 8000288:	4b7e      	ldr	r3, [pc, #504]	; (8000484 <fsm_modify+0x2c4>)
 800028a:	2201      	movs	r2, #1
 800028c:	601a      	str	r2, [r3, #0]
			status3 = YELLOW1_MODIFY;
 800028e:	4b7b      	ldr	r3, [pc, #492]	; (800047c <fsm_modify+0x2bc>)
 8000290:	220d      	movs	r2, #13
 8000292:	601a      	str	r2, [r3, #0]
		}
		break;
 8000294:	e1ba      	b.n	800060c <fsm_modify+0x44c>
	case YELLOW1_MODIFY:
		mode = 3;
 8000296:	4b7a      	ldr	r3, [pc, #488]	; (8000480 <fsm_modify+0x2c0>)
 8000298:	2203      	movs	r2, #3
 800029a:	601a      	str	r2, [r3, #0]
		if(endTimer1()) {
 800029c:	f001 fda2 	bl	8001de4 <endTimer1>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d007      	beq.n	80002b6 <fsm_modify+0xf6>
			setTimer1(100);
 80002a6:	2064      	movs	r0, #100	; 0x64
 80002a8:	f001 fcd0 	bl	8001c4c <setTimer1>
			toggleLEDs(mode);
 80002ac:	4b74      	ldr	r3, [pc, #464]	; (8000480 <fsm_modify+0x2c0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff4b 	bl	800014c <toggleLEDs>
		}
		if(Press_button(SET_VALUE)){
 80002b6:	2002      	movs	r0, #2
 80002b8:	f000 fddc 	bl	8000e74 <Press_button>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d00e      	beq.n	80002e0 <fsm_modify+0x120>
			clearLed();
 80002c2:	f000 feb7 	bl	8001034 <clearLed>
			yellow1_duration = time_input * 100;
 80002c6:	4b6f      	ldr	r3, [pc, #444]	; (8000484 <fsm_modify+0x2c4>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2264      	movs	r2, #100	; 0x64
 80002cc:	fb02 f303 	mul.w	r3, r2, r3
 80002d0:	4a6f      	ldr	r2, [pc, #444]	; (8000490 <fsm_modify+0x2d0>)
 80002d2:	6013      	str	r3, [r2, #0]
			time_input = 1;
 80002d4:	4b6b      	ldr	r3, [pc, #428]	; (8000484 <fsm_modify+0x2c4>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	601a      	str	r2, [r3, #0]
			status3 = GREEN1_MODIFY;
 80002da:	4b68      	ldr	r3, [pc, #416]	; (800047c <fsm_modify+0x2bc>)
 80002dc:	220e      	movs	r2, #14
 80002de:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(SET_TIMER)) {
 80002e0:	2001      	movs	r0, #1
 80002e2:	f000 fdc7 	bl	8000e74 <Press_button>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d015      	beq.n	8000318 <fsm_modify+0x158>
			time_input = (time_input + 1) % 100;
 80002ec:	4b65      	ldr	r3, [pc, #404]	; (8000484 <fsm_modify+0x2c4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	1c5a      	adds	r2, r3, #1
 80002f2:	4b66      	ldr	r3, [pc, #408]	; (800048c <fsm_modify+0x2cc>)
 80002f4:	fb83 1302 	smull	r1, r3, r3, r2
 80002f8:	1159      	asrs	r1, r3, #5
 80002fa:	17d3      	asrs	r3, r2, #31
 80002fc:	1acb      	subs	r3, r1, r3
 80002fe:	2164      	movs	r1, #100	; 0x64
 8000300:	fb01 f303 	mul.w	r3, r1, r3
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	4a5f      	ldr	r2, [pc, #380]	; (8000484 <fsm_modify+0x2c4>)
 8000308:	6013      	str	r3, [r2, #0]
			if(time_input == 0) time_input = 1;
 800030a:	4b5e      	ldr	r3, [pc, #376]	; (8000484 <fsm_modify+0x2c4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d102      	bne.n	8000318 <fsm_modify+0x158>
 8000312:	4b5c      	ldr	r3, [pc, #368]	; (8000484 <fsm_modify+0x2c4>)
 8000314:	2201      	movs	r2, #1
 8000316:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(CONTROL)){
 8000318:	2000      	movs	r0, #0
 800031a:	f000 fdab 	bl	8000e74 <Press_button>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	f000 8175 	beq.w	8000610 <fsm_modify+0x450>
			clearLed();
 8000326:	f000 fe85 	bl	8001034 <clearLed>
			time_input = 1;
 800032a:	4b56      	ldr	r3, [pc, #344]	; (8000484 <fsm_modify+0x2c4>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
			status3 = GREEN1_MODIFY;
 8000330:	4b52      	ldr	r3, [pc, #328]	; (800047c <fsm_modify+0x2bc>)
 8000332:	220e      	movs	r2, #14
 8000334:	601a      	str	r2, [r3, #0]
		}
		break;
 8000336:	e16b      	b.n	8000610 <fsm_modify+0x450>
	case GREEN1_MODIFY:
		mode = 4;
 8000338:	4b51      	ldr	r3, [pc, #324]	; (8000480 <fsm_modify+0x2c0>)
 800033a:	2204      	movs	r2, #4
 800033c:	601a      	str	r2, [r3, #0]
		if(endTimer1()) {
 800033e:	f001 fd51 	bl	8001de4 <endTimer1>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d007      	beq.n	8000358 <fsm_modify+0x198>
			setTimer1(100);
 8000348:	2064      	movs	r0, #100	; 0x64
 800034a:	f001 fc7f 	bl	8001c4c <setTimer1>
			toggleLEDs(mode);
 800034e:	4b4c      	ldr	r3, [pc, #304]	; (8000480 <fsm_modify+0x2c0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff fefa 	bl	800014c <toggleLEDs>
		}
		if(Press_button(SET_VALUE)) {
 8000358:	2002      	movs	r0, #2
 800035a:	f000 fd8b 	bl	8000e74 <Press_button>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d00e      	beq.n	8000382 <fsm_modify+0x1c2>
			clearLed();
 8000364:	f000 fe66 	bl	8001034 <clearLed>
			green1_duration = time_input * 100;
 8000368:	4b46      	ldr	r3, [pc, #280]	; (8000484 <fsm_modify+0x2c4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2264      	movs	r2, #100	; 0x64
 800036e:	fb02 f303 	mul.w	r3, r2, r3
 8000372:	4a48      	ldr	r2, [pc, #288]	; (8000494 <fsm_modify+0x2d4>)
 8000374:	6013      	str	r3, [r2, #0]
			time_input = 1;
 8000376:	4b43      	ldr	r3, [pc, #268]	; (8000484 <fsm_modify+0x2c4>)
 8000378:	2201      	movs	r2, #1
 800037a:	601a      	str	r2, [r3, #0]
			status3 = RED2_MODIFY;
 800037c:	4b3f      	ldr	r3, [pc, #252]	; (800047c <fsm_modify+0x2bc>)
 800037e:	220f      	movs	r2, #15
 8000380:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(SET_TIMER)) {
 8000382:	2001      	movs	r0, #1
 8000384:	f000 fd76 	bl	8000e74 <Press_button>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d015      	beq.n	80003ba <fsm_modify+0x1fa>
			time_input = (time_input + 1) % 100;
 800038e:	4b3d      	ldr	r3, [pc, #244]	; (8000484 <fsm_modify+0x2c4>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	1c5a      	adds	r2, r3, #1
 8000394:	4b3d      	ldr	r3, [pc, #244]	; (800048c <fsm_modify+0x2cc>)
 8000396:	fb83 1302 	smull	r1, r3, r3, r2
 800039a:	1159      	asrs	r1, r3, #5
 800039c:	17d3      	asrs	r3, r2, #31
 800039e:	1acb      	subs	r3, r1, r3
 80003a0:	2164      	movs	r1, #100	; 0x64
 80003a2:	fb01 f303 	mul.w	r3, r1, r3
 80003a6:	1ad3      	subs	r3, r2, r3
 80003a8:	4a36      	ldr	r2, [pc, #216]	; (8000484 <fsm_modify+0x2c4>)
 80003aa:	6013      	str	r3, [r2, #0]
			if(time_input == 0) time_input = 1;
 80003ac:	4b35      	ldr	r3, [pc, #212]	; (8000484 <fsm_modify+0x2c4>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d102      	bne.n	80003ba <fsm_modify+0x1fa>
 80003b4:	4b33      	ldr	r3, [pc, #204]	; (8000484 <fsm_modify+0x2c4>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(CONTROL)) {
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 fd5a 	bl	8000e74 <Press_button>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f000 8126 	beq.w	8000614 <fsm_modify+0x454>
			clearLed();
 80003c8:	f000 fe34 	bl	8001034 <clearLed>
			time_input = 1;
 80003cc:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <fsm_modify+0x2c4>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
			status3 = RED2_MODIFY;
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <fsm_modify+0x2bc>)
 80003d4:	220f      	movs	r2, #15
 80003d6:	601a      	str	r2, [r3, #0]
		}
		break;
 80003d8:	e11c      	b.n	8000614 <fsm_modify+0x454>
	case RED2_MODIFY:
		mode = 5;
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <fsm_modify+0x2c0>)
 80003dc:	2205      	movs	r2, #5
 80003de:	601a      	str	r2, [r3, #0]
		if(endTimer1()) {
 80003e0:	f001 fd00 	bl	8001de4 <endTimer1>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d007      	beq.n	80003fa <fsm_modify+0x23a>
			setTimer1(100);
 80003ea:	2064      	movs	r0, #100	; 0x64
 80003ec:	f001 fc2e 	bl	8001c4c <setTimer1>
			toggleLEDs(mode);
 80003f0:	4b23      	ldr	r3, [pc, #140]	; (8000480 <fsm_modify+0x2c0>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff fea9 	bl	800014c <toggleLEDs>
		}
		if(Press_button(SET_VALUE)) {
 80003fa:	2002      	movs	r0, #2
 80003fc:	f000 fd3a 	bl	8000e74 <Press_button>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d00e      	beq.n	8000424 <fsm_modify+0x264>
			clearLed();
 8000406:	f000 fe15 	bl	8001034 <clearLed>
			red2_duration = time_input * 100;
 800040a:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <fsm_modify+0x2c4>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2264      	movs	r2, #100	; 0x64
 8000410:	fb02 f303 	mul.w	r3, r2, r3
 8000414:	4a20      	ldr	r2, [pc, #128]	; (8000498 <fsm_modify+0x2d8>)
 8000416:	6013      	str	r3, [r2, #0]
			time_input = 1;
 8000418:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <fsm_modify+0x2c4>)
 800041a:	2201      	movs	r2, #1
 800041c:	601a      	str	r2, [r3, #0]
			status3 = YELLOW2_MODIFY;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <fsm_modify+0x2bc>)
 8000420:	2210      	movs	r2, #16
 8000422:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(SET_TIMER)) {
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fd25 	bl	8000e74 <Press_button>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d015      	beq.n	800045c <fsm_modify+0x29c>
			time_input = (time_input + 1) % 100;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <fsm_modify+0x2c4>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	1c5a      	adds	r2, r3, #1
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <fsm_modify+0x2cc>)
 8000438:	fb83 1302 	smull	r1, r3, r3, r2
 800043c:	1159      	asrs	r1, r3, #5
 800043e:	17d3      	asrs	r3, r2, #31
 8000440:	1acb      	subs	r3, r1, r3
 8000442:	2164      	movs	r1, #100	; 0x64
 8000444:	fb01 f303 	mul.w	r3, r1, r3
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <fsm_modify+0x2c4>)
 800044c:	6013      	str	r3, [r2, #0]
			if(time_input == 0) time_input = 1;
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <fsm_modify+0x2c4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d102      	bne.n	800045c <fsm_modify+0x29c>
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <fsm_modify+0x2c4>)
 8000458:	2201      	movs	r2, #1
 800045a:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(CONTROL)) {
 800045c:	2000      	movs	r0, #0
 800045e:	f000 fd09 	bl	8000e74 <Press_button>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	f000 80d7 	beq.w	8000618 <fsm_modify+0x458>
			clearLed();
 800046a:	f000 fde3 	bl	8001034 <clearLed>
			time_input = 1;
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <fsm_modify+0x2c4>)
 8000470:	2201      	movs	r2, #1
 8000472:	601a      	str	r2, [r3, #0]
			status3 = YELLOW2_MODIFY;
 8000474:	4b01      	ldr	r3, [pc, #4]	; (800047c <fsm_modify+0x2bc>)
 8000476:	2210      	movs	r2, #16
 8000478:	601a      	str	r2, [r3, #0]
		}
		break;
 800047a:	e0cd      	b.n	8000618 <fsm_modify+0x458>
 800047c:	20000010 	.word	0x20000010
 8000480:	20000030 	.word	0x20000030
 8000484:	2000002c 	.word	0x2000002c
 8000488:	20000014 	.word	0x20000014
 800048c:	51eb851f 	.word	0x51eb851f
 8000490:	20000018 	.word	0x20000018
 8000494:	2000001c 	.word	0x2000001c
 8000498:	20000020 	.word	0x20000020
	case YELLOW2_MODIFY:
		mode = 6;
 800049c:	4b62      	ldr	r3, [pc, #392]	; (8000628 <fsm_modify+0x468>)
 800049e:	2206      	movs	r2, #6
 80004a0:	601a      	str	r2, [r3, #0]
		if(endTimer1()) {
 80004a2:	f001 fc9f 	bl	8001de4 <endTimer1>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d007      	beq.n	80004bc <fsm_modify+0x2fc>
			setTimer1(100);
 80004ac:	2064      	movs	r0, #100	; 0x64
 80004ae:	f001 fbcd 	bl	8001c4c <setTimer1>
			toggleLEDs(mode);
 80004b2:	4b5d      	ldr	r3, [pc, #372]	; (8000628 <fsm_modify+0x468>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fe48 	bl	800014c <toggleLEDs>
		}
		if(Press_button(SET_VALUE)){
 80004bc:	2002      	movs	r0, #2
 80004be:	f000 fcd9 	bl	8000e74 <Press_button>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d00e      	beq.n	80004e6 <fsm_modify+0x326>
			clearLed();
 80004c8:	f000 fdb4 	bl	8001034 <clearLed>
			yellow2_duration = time_input * 100;
 80004cc:	4b57      	ldr	r3, [pc, #348]	; (800062c <fsm_modify+0x46c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2264      	movs	r2, #100	; 0x64
 80004d2:	fb02 f303 	mul.w	r3, r2, r3
 80004d6:	4a56      	ldr	r2, [pc, #344]	; (8000630 <fsm_modify+0x470>)
 80004d8:	6013      	str	r3, [r2, #0]
			time_input = 1;
 80004da:	4b54      	ldr	r3, [pc, #336]	; (800062c <fsm_modify+0x46c>)
 80004dc:	2201      	movs	r2, #1
 80004de:	601a      	str	r2, [r3, #0]
			status3 = GREEN2_MODIFY;
 80004e0:	4b54      	ldr	r3, [pc, #336]	; (8000634 <fsm_modify+0x474>)
 80004e2:	2211      	movs	r2, #17
 80004e4:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(SET_TIMER)) {
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fcc4 	bl	8000e74 <Press_button>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d015      	beq.n	800051e <fsm_modify+0x35e>
			time_input = (time_input + 1) % 100;
 80004f2:	4b4e      	ldr	r3, [pc, #312]	; (800062c <fsm_modify+0x46c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	4b4f      	ldr	r3, [pc, #316]	; (8000638 <fsm_modify+0x478>)
 80004fa:	fb83 1302 	smull	r1, r3, r3, r2
 80004fe:	1159      	asrs	r1, r3, #5
 8000500:	17d3      	asrs	r3, r2, #31
 8000502:	1acb      	subs	r3, r1, r3
 8000504:	2164      	movs	r1, #100	; 0x64
 8000506:	fb01 f303 	mul.w	r3, r1, r3
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	4a47      	ldr	r2, [pc, #284]	; (800062c <fsm_modify+0x46c>)
 800050e:	6013      	str	r3, [r2, #0]
			if(time_input == 0) time_input = 1;
 8000510:	4b46      	ldr	r3, [pc, #280]	; (800062c <fsm_modify+0x46c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d102      	bne.n	800051e <fsm_modify+0x35e>
 8000518:	4b44      	ldr	r3, [pc, #272]	; (800062c <fsm_modify+0x46c>)
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
		}
		if(Press_button(CONTROL)) {
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fca8 	bl	8000e74 <Press_button>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d078      	beq.n	800061c <fsm_modify+0x45c>
			clearLed();
 800052a:	f000 fd83 	bl	8001034 <clearLed>
			time_input = 1;
 800052e:	4b3f      	ldr	r3, [pc, #252]	; (800062c <fsm_modify+0x46c>)
 8000530:	2201      	movs	r2, #1
 8000532:	601a      	str	r2, [r3, #0]
			status3 = GREEN2_MODIFY;
 8000534:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <fsm_modify+0x474>)
 8000536:	2211      	movs	r2, #17
 8000538:	601a      	str	r2, [r3, #0]
		}
		break;
 800053a:	e06f      	b.n	800061c <fsm_modify+0x45c>
	case GREEN2_MODIFY:
		mode = 7;
 800053c:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <fsm_modify+0x468>)
 800053e:	2207      	movs	r2, #7
 8000540:	601a      	str	r2, [r3, #0]
		if (endTimer1()){
 8000542:	f001 fc4f 	bl	8001de4 <endTimer1>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d007      	beq.n	800055c <fsm_modify+0x39c>
			setTimer1(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 fb7d 	bl	8001c4c <setTimer1>
			toggleLEDs(mode);
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <fsm_modify+0x468>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fdf8 	bl	800014c <toggleLEDs>
		}
		if(Press_button(SET_VALUE)) {
 800055c:	2002      	movs	r0, #2
 800055e:	f000 fc89 	bl	8000e74 <Press_button>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d01b      	beq.n	80005a0 <fsm_modify+0x3e0>
		    clearLed();
 8000568:	f000 fd64 	bl	8001034 <clearLed>
		    green2_duration = time_input * 100;
 800056c:	4b2f      	ldr	r3, [pc, #188]	; (800062c <fsm_modify+0x46c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2264      	movs	r2, #100	; 0x64
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	4a31      	ldr	r2, [pc, #196]	; (800063c <fsm_modify+0x47c>)
 8000578:	6013      	str	r3, [r2, #0]
		    time_input = 1;
 800057a:	4b2c      	ldr	r3, [pc, #176]	; (800062c <fsm_modify+0x46c>)
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
		    return_flag1 = return_flag2 = 1;
 8000580:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <fsm_modify+0x480>)
 8000582:	2201      	movs	r2, #1
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <fsm_modify+0x480>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a2e      	ldr	r2, [pc, #184]	; (8000644 <fsm_modify+0x484>)
 800058c:	6013      	str	r3, [r2, #0]
		    status3 = DELAY;
 800058e:	4b29      	ldr	r3, [pc, #164]	; (8000634 <fsm_modify+0x474>)
 8000590:	2212      	movs	r2, #18
 8000592:	601a      	str	r2, [r3, #0]
		    led1 = &countdown1;
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <fsm_modify+0x488>)
 8000596:	4a2d      	ldr	r2, [pc, #180]	; (800064c <fsm_modify+0x48c>)
 8000598:	601a      	str	r2, [r3, #0]
		    led2 = &countdown2;
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <fsm_modify+0x490>)
 800059c:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <fsm_modify+0x494>)
 800059e:	601a      	str	r2, [r3, #0]
		 }

		 if(Press_button(SET_TIMER)) {
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fc67 	bl	8000e74 <Press_button>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d011      	beq.n	80005d0 <fsm_modify+0x410>
		     time_input = (time_input % 99) + 1;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <fsm_modify+0x46c>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <fsm_modify+0x498>)
 80005b2:	fb83 1302 	smull	r1, r3, r3, r2
 80005b6:	4413      	add	r3, r2
 80005b8:	1199      	asrs	r1, r3, #6
 80005ba:	17d3      	asrs	r3, r2, #31
 80005bc:	1ac9      	subs	r1, r1, r3
 80005be:	460b      	mov	r3, r1
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	440b      	add	r3, r1
 80005c4:	0159      	lsls	r1, r3, #5
 80005c6:	440b      	add	r3, r1
 80005c8:	1ad1      	subs	r1, r2, r3
 80005ca:	1c4b      	adds	r3, r1, #1
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <fsm_modify+0x46c>)
 80005ce:	6013      	str	r3, [r2, #0]
		 }

		 if(Press_button(CONTROL)) {
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fc4f 	bl	8000e74 <Press_button>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d021      	beq.n	8000620 <fsm_modify+0x460>
		    clearLed();
 80005dc:	f000 fd2a 	bl	8001034 <clearLed>
		    time_input = 1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <fsm_modify+0x46c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
		    return_flag1 = return_flag2 = 1;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <fsm_modify+0x480>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <fsm_modify+0x480>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <fsm_modify+0x484>)
 80005f2:	6013      	str	r3, [r2, #0]
		    status3 = DELAY;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <fsm_modify+0x474>)
 80005f6:	2212      	movs	r2, #18
 80005f8:	601a      	str	r2, [r3, #0]
		    led1 = &countdown1;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <fsm_modify+0x488>)
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <fsm_modify+0x48c>)
 80005fe:	601a      	str	r2, [r3, #0]
		    led2 = &countdown2;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <fsm_modify+0x490>)
 8000602:	4a14      	ldr	r2, [pc, #80]	; (8000654 <fsm_modify+0x494>)
 8000604:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8000606:	e00b      	b.n	8000620 <fsm_modify+0x460>
	case DELAY:
		break;
	default:
		break;
 8000608:	bf00      	nop
 800060a:	e00a      	b.n	8000622 <fsm_modify+0x462>
		break;
 800060c:	bf00      	nop
 800060e:	e008      	b.n	8000622 <fsm_modify+0x462>
		break;
 8000610:	bf00      	nop
 8000612:	e006      	b.n	8000622 <fsm_modify+0x462>
		break;
 8000614:	bf00      	nop
 8000616:	e004      	b.n	8000622 <fsm_modify+0x462>
		break;
 8000618:	bf00      	nop
 800061a:	e002      	b.n	8000622 <fsm_modify+0x462>
		break;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <fsm_modify+0x462>
		  break;
 8000620:	bf00      	nop
	}
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000030 	.word	0x20000030
 800062c:	2000002c 	.word	0x2000002c
 8000630:	20000024 	.word	0x20000024
 8000634:	20000010 	.word	0x20000010
 8000638:	51eb851f 	.word	0x51eb851f
 800063c:	20000028 	.word	0x20000028
 8000640:	20000074 	.word	0x20000074
 8000644:	20000070 	.word	0x20000070
 8000648:	20000114 	.word	0x20000114
 800064c:	20000068 	.word	0x20000068
 8000650:	20000118 	.word	0x20000118
 8000654:	2000006c 	.word	0x2000006c
 8000658:	a57eb503 	.word	0xa57eb503

0800065c <systemINIT>:
int countdown2 = 0;

int return_flag1 = 0;
int return_flag2 = 0;

void systemINIT(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	setButton();
 8000660:	f000 fb3c 	bl	8000cdc <setButton>
	GPIOB->ODR = 0xffff;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <systemINIT+0x70>)
 8000666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800066a:	60da      	str	r2, [r3, #12]
	setTimer0(10);
 800066c:	200a      	movs	r0, #10
 800066e:	f001 fad9 	bl	8001c24 <setTimer0>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4815      	ldr	r0, [pc, #84]	; (80006d0 <systemINIT+0x74>)
 800067a:	f001 ff62 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <systemINIT+0x74>)
 8000686:	f001 ff5c 	bl	8002542 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <systemINIT+0x74>)
 8000690:	f001 ff57 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2108      	movs	r1, #8
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <systemINIT+0x74>)
 800069a:	f001 ff52 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <systemINIT+0x74>)
 80006a4:	f001 ff4d 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2120      	movs	r1, #32
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <systemINIT+0x74>)
 80006ae:	f001 ff48 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2140      	movs	r1, #64	; 0x40
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <systemINIT+0x74>)
 80006b8:	f001 ff43 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <systemINIT+0x74>)
 80006c2:	f001 ff3e 	bl	8002542 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40010c00 	.word	0x40010c00
 80006d0:	40010800 	.word	0x40010800

080006d4 <handleButtonPress>:
 *      Author: WINDOWS10
 */

#include "input_processing.h"

void handleButtonPress() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    if(Press_button(0)){
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fbcb 	bl	8000e74 <Press_button>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d023      	beq.n	800072c <handleButtonPress+0x58>
        clearLed();
 80006e4:	f000 fca6 	bl	8001034 <clearLed>
        lastState1 = status1;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <handleButtonPress+0x5c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <handleButtonPress+0x60>)
 80006ee:	6013      	str	r3, [r2, #0]
        lastState2 = status2;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <handleButtonPress+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a11      	ldr	r2, [pc, #68]	; (800073c <handleButtonPress+0x68>)
 80006f6:	6013      	str	r3, [r2, #0]
        status1 = DELAY;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <handleButtonPress+0x5c>)
 80006fa:	2212      	movs	r2, #18
 80006fc:	601a      	str	r2, [r3, #0]
        status2 = DELAY;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <handleButtonPress+0x64>)
 8000700:	2212      	movs	r2, #18
 8000702:	601a      	str	r2, [r3, #0]
        status3 = RED1_MODIFY;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <handleButtonPress+0x6c>)
 8000706:	220c      	movs	r2, #12
 8000708:	601a      	str	r2, [r3, #0]
        clearTimer1();
 800070a:	f001 fbb3 	bl	8001e74 <clearTimer1>
        clearTimer2();
 800070e:	f001 fbc1 	bl	8001e94 <clearTimer2>
        clearTimer3();
 8000712:	f001 fbcf 	bl	8001eb4 <clearTimer3>
        clearTimer4();
 8000716:	f001 fbdd 	bl	8001ed4 <clearTimer4>
        setTimer1(100);
 800071a:	2064      	movs	r0, #100	; 0x64
 800071c:	f001 fa96 	bl	8001c4c <setTimer1>
        led1 = &time_input;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <handleButtonPress+0x70>)
 8000722:	4a09      	ldr	r2, [pc, #36]	; (8000748 <handleButtonPress+0x74>)
 8000724:	601a      	str	r2, [r3, #0]
        led2 = &mode;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <handleButtonPress+0x78>)
 8000728:	4a09      	ldr	r2, [pc, #36]	; (8000750 <handleButtonPress+0x7c>)
 800072a:	601a      	str	r2, [r3, #0]
    }
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	20000004 	.word	0x20000004
 8000738:	20000008 	.word	0x20000008
 800073c:	2000000c 	.word	0x2000000c
 8000740:	20000010 	.word	0x20000010
 8000744:	20000114 	.word	0x20000114
 8000748:	2000002c 	.word	0x2000002c
 800074c:	20000118 	.word	0x20000118
 8000750:	20000030 	.word	0x20000030

08000754 <runFsm1>:

void runFsm1(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    switch(status1){
 8000758:	4ba5      	ldr	r3, [pc, #660]	; (80009f0 <runFsm1+0x29c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3b01      	subs	r3, #1
 800075e:	2b11      	cmp	r3, #17
 8000760:	f200 8141 	bhi.w	80009e6 <runFsm1+0x292>
 8000764:	a201      	add	r2, pc, #4	; (adr r2, 800076c <runFsm1+0x18>)
 8000766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076a:	bf00      	nop
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007f9 	.word	0x080007f9
 8000774:	080008b5 	.word	0x080008b5
 8000778:	08000857 	.word	0x08000857
 800077c:	080009e7 	.word	0x080009e7
 8000780:	080009e7 	.word	0x080009e7
 8000784:	080009e7 	.word	0x080009e7
 8000788:	080009e7 	.word	0x080009e7
 800078c:	080009e7 	.word	0x080009e7
 8000790:	080009e7 	.word	0x080009e7
 8000794:	080009e7 	.word	0x080009e7
 8000798:	080009e7 	.word	0x080009e7
 800079c:	080009e7 	.word	0x080009e7
 80007a0:	080009e7 	.word	0x080009e7
 80007a4:	080009e7 	.word	0x080009e7
 80007a8:	080009e7 	.word	0x080009e7
 80007ac:	080009e7 	.word	0x080009e7
 80007b0:	08000913 	.word	0x08000913
        case NORMAL:
            setRed1();
 80007b4:	f000 fb7e 	bl	8000eb4 <setRed1>
            status1 = RED_LED;
 80007b8:	4b8d      	ldr	r3, [pc, #564]	; (80009f0 <runFsm1+0x29c>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	601a      	str	r2, [r3, #0]
            lastState1 = status1;
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <runFsm1+0x29c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a8c      	ldr	r2, [pc, #560]	; (80009f4 <runFsm1+0x2a0>)
 80007c4:	6013      	str	r3, [r2, #0]
            setTimer1(red1_duration);
 80007c6:	4b8c      	ldr	r3, [pc, #560]	; (80009f8 <runFsm1+0x2a4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fa3e 	bl	8001c4c <setTimer1>
            setTimer3(100);
 80007d0:	2064      	movs	r0, #100	; 0x64
 80007d2:	f001 fa63 	bl	8001c9c <setTimer3>
            countdown1 = red1_duration / 100;
 80007d6:	4b88      	ldr	r3, [pc, #544]	; (80009f8 <runFsm1+0x2a4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a88      	ldr	r2, [pc, #544]	; (80009fc <runFsm1+0x2a8>)
 80007dc:	fb82 1203 	smull	r1, r2, r2, r3
 80007e0:	1152      	asrs	r2, r2, #5
 80007e2:	17db      	asrs	r3, r3, #31
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	4a86      	ldr	r2, [pc, #536]	; (8000a00 <runFsm1+0x2ac>)
 80007e8:	6013      	str	r3, [r2, #0]
            led1 = &countdown1;
 80007ea:	4b86      	ldr	r3, [pc, #536]	; (8000a04 <runFsm1+0x2b0>)
 80007ec:	4a84      	ldr	r2, [pc, #528]	; (8000a00 <runFsm1+0x2ac>)
 80007ee:	601a      	str	r2, [r3, #0]
            mode = 1;
 80007f0:	4b85      	ldr	r3, [pc, #532]	; (8000a08 <runFsm1+0x2b4>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
            break;
 80007f6:	e0f9      	b.n	80009ec <runFsm1+0x298>

        case RED_LED:
            setRed1();
 80007f8:	f000 fb5c 	bl	8000eb4 <setRed1>
            mode = 1;
 80007fc:	4b82      	ldr	r3, [pc, #520]	; (8000a08 <runFsm1+0x2b4>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
            if(endTimer3()){
 8000802:	f001 fb13 	bl	8001e2c <endTimer3>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d007      	beq.n	800081c <runFsm1+0xc8>
                setTimer3(100);
 800080c:	2064      	movs	r0, #100	; 0x64
 800080e:	f001 fa45 	bl	8001c9c <setTimer3>
                countdown1--;
 8000812:	4b7b      	ldr	r3, [pc, #492]	; (8000a00 <runFsm1+0x2ac>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3b01      	subs	r3, #1
 8000818:	4a79      	ldr	r2, [pc, #484]	; (8000a00 <runFsm1+0x2ac>)
 800081a:	6013      	str	r3, [r2, #0]
            }
            if(endTimer1() == 1){
 800081c:	f001 fae2 	bl	8001de4 <endTimer1>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d114      	bne.n	8000850 <runFsm1+0xfc>
                setTimer1(green1_duration);
 8000826:	4b79      	ldr	r3, [pc, #484]	; (8000a0c <runFsm1+0x2b8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fa0e 	bl	8001c4c <setTimer1>
                status1 = GREEN_LED;
 8000830:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <runFsm1+0x29c>)
 8000832:	2204      	movs	r2, #4
 8000834:	601a      	str	r2, [r3, #0]
                setTimer3(100);
 8000836:	2064      	movs	r0, #100	; 0x64
 8000838:	f001 fa30 	bl	8001c9c <setTimer3>
                countdown1 = green1_duration / 100;
 800083c:	4b73      	ldr	r3, [pc, #460]	; (8000a0c <runFsm1+0x2b8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a6e      	ldr	r2, [pc, #440]	; (80009fc <runFsm1+0x2a8>)
 8000842:	fb82 1203 	smull	r1, r2, r2, r3
 8000846:	1152      	asrs	r2, r2, #5
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	4a6c      	ldr	r2, [pc, #432]	; (8000a00 <runFsm1+0x2ac>)
 800084e:	6013      	str	r3, [r2, #0]
            }
            handleButtonPress();
 8000850:	f7ff ff40 	bl	80006d4 <handleButtonPress>
            break;
 8000854:	e0ca      	b.n	80009ec <runFsm1+0x298>
        case GREEN_LED:
            mode = 1;
 8000856:	4b6c      	ldr	r3, [pc, #432]	; (8000a08 <runFsm1+0x2b4>)
 8000858:	2201      	movs	r2, #1
 800085a:	601a      	str	r2, [r3, #0]
            setGreen1();
 800085c:	f000 fb56 	bl	8000f0c <setGreen1>
            if(endTimer3()){
 8000860:	f001 fae4 	bl	8001e2c <endTimer3>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d007      	beq.n	800087a <runFsm1+0x126>
                setTimer3(100);
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f001 fa16 	bl	8001c9c <setTimer3>
                countdown1--;
 8000870:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <runFsm1+0x2ac>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3b01      	subs	r3, #1
 8000876:	4a62      	ldr	r2, [pc, #392]	; (8000a00 <runFsm1+0x2ac>)
 8000878:	6013      	str	r3, [r2, #0]
            }
            if(endTimer1() == 1){
 800087a:	f001 fab3 	bl	8001de4 <endTimer1>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d114      	bne.n	80008ae <runFsm1+0x15a>
                setTimer1(yellow1_duration);
 8000884:	4b62      	ldr	r3, [pc, #392]	; (8000a10 <runFsm1+0x2bc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f9df 	bl	8001c4c <setTimer1>
                status1 = YELLOW_LED;
 800088e:	4b58      	ldr	r3, [pc, #352]	; (80009f0 <runFsm1+0x29c>)
 8000890:	2203      	movs	r2, #3
 8000892:	601a      	str	r2, [r3, #0]
                setTimer3(100);
 8000894:	2064      	movs	r0, #100	; 0x64
 8000896:	f001 fa01 	bl	8001c9c <setTimer3>
                countdown1 = yellow1_duration / 100;
 800089a:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <runFsm1+0x2bc>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a57      	ldr	r2, [pc, #348]	; (80009fc <runFsm1+0x2a8>)
 80008a0:	fb82 1203 	smull	r1, r2, r2, r3
 80008a4:	1152      	asrs	r2, r2, #5
 80008a6:	17db      	asrs	r3, r3, #31
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	4a55      	ldr	r2, [pc, #340]	; (8000a00 <runFsm1+0x2ac>)
 80008ac:	6013      	str	r3, [r2, #0]
            }
            handleButtonPress();
 80008ae:	f7ff ff11 	bl	80006d4 <handleButtonPress>
            break;
 80008b2:	e09b      	b.n	80009ec <runFsm1+0x298>
        case YELLOW_LED:
            mode = 1;
 80008b4:	4b54      	ldr	r3, [pc, #336]	; (8000a08 <runFsm1+0x2b4>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	601a      	str	r2, [r3, #0]
            setYellow1();
 80008ba:	f000 fb11 	bl	8000ee0 <setYellow1>
            if(endTimer3()){
 80008be:	f001 fab5 	bl	8001e2c <endTimer3>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d007      	beq.n	80008d8 <runFsm1+0x184>
                setTimer3(100);
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f001 f9e7 	bl	8001c9c <setTimer3>
                countdown1--;
 80008ce:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <runFsm1+0x2ac>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	4a4a      	ldr	r2, [pc, #296]	; (8000a00 <runFsm1+0x2ac>)
 80008d6:	6013      	str	r3, [r2, #0]
            }
            if(endTimer1() == 1){
 80008d8:	f001 fa84 	bl	8001de4 <endTimer1>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d114      	bne.n	800090c <runFsm1+0x1b8>
                setTimer1(red1_duration);
 80008e2:	4b45      	ldr	r3, [pc, #276]	; (80009f8 <runFsm1+0x2a4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f9b0 	bl	8001c4c <setTimer1>
                status1 = RED_LED;
 80008ec:	4b40      	ldr	r3, [pc, #256]	; (80009f0 <runFsm1+0x29c>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	601a      	str	r2, [r3, #0]
                setTimer3(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f001 f9d2 	bl	8001c9c <setTimer3>
                countdown1 = red1_duration / 100;
 80008f8:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <runFsm1+0x2a4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a3f      	ldr	r2, [pc, #252]	; (80009fc <runFsm1+0x2a8>)
 80008fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000902:	1152      	asrs	r2, r2, #5
 8000904:	17db      	asrs	r3, r3, #31
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	4a3d      	ldr	r2, [pc, #244]	; (8000a00 <runFsm1+0x2ac>)
 800090a:	6013      	str	r3, [r2, #0]
            }
            handleButtonPress();
 800090c:	f7ff fee2 	bl	80006d4 <handleButtonPress>
            break;
 8000910:	e06c      	b.n	80009ec <runFsm1+0x298>
        case DELAY:
            if(lastState1 == RED_LED && return_flag1){
 8000912:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <runFsm1+0x2a0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d11e      	bne.n	8000958 <runFsm1+0x204>
 800091a:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <runFsm1+0x2c0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d01a      	beq.n	8000958 <runFsm1+0x204>
                clearLed();
 8000922:	f000 fb87 	bl	8001034 <clearLed>
                status1 = lastState1;
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <runFsm1+0x2a0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a31      	ldr	r2, [pc, #196]	; (80009f0 <runFsm1+0x29c>)
 800092c:	6013      	str	r3, [r2, #0]
                return_flag1 = 0;
 800092e:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <runFsm1+0x2c0>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
                setTimer3(100);
 8000934:	2064      	movs	r0, #100	; 0x64
 8000936:	f001 f9b1 	bl	8001c9c <setTimer3>
                setTimer1(red1_duration);
 800093a:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <runFsm1+0x2a4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f984 	bl	8001c4c <setTimer1>
                countdown1 = red1_duration / 100;
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <runFsm1+0x2a4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a2c      	ldr	r2, [pc, #176]	; (80009fc <runFsm1+0x2a8>)
 800094a:	fb82 1203 	smull	r1, r2, r2, r3
 800094e:	1152      	asrs	r2, r2, #5
 8000950:	17db      	asrs	r3, r3, #31
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	4a2a      	ldr	r2, [pc, #168]	; (8000a00 <runFsm1+0x2ac>)
 8000956:	6013      	str	r3, [r2, #0]
            }
            if(lastState1 == GREEN_LED && return_flag1){
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <runFsm1+0x2a0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b04      	cmp	r3, #4
 800095e:	d11e      	bne.n	800099e <runFsm1+0x24a>
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <runFsm1+0x2c0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d01a      	beq.n	800099e <runFsm1+0x24a>
                return_flag1 = 0;
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <runFsm1+0x2c0>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
                status1 = lastState1;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <runFsm1+0x2a0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <runFsm1+0x29c>)
 8000974:	6013      	str	r3, [r2, #0]
                clearLed();
 8000976:	f000 fb5d 	bl	8001034 <clearLed>
                setTimer3(100);
 800097a:	2064      	movs	r0, #100	; 0x64
 800097c:	f001 f98e 	bl	8001c9c <setTimer3>
                setTimer1(green1_duration);
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <runFsm1+0x2b8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f961 	bl	8001c4c <setTimer1>
                countdown1 = green1_duration / 100;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <runFsm1+0x2b8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <runFsm1+0x2a8>)
 8000990:	fb82 1203 	smull	r1, r2, r2, r3
 8000994:	1152      	asrs	r2, r2, #5
 8000996:	17db      	asrs	r3, r3, #31
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <runFsm1+0x2ac>)
 800099c:	6013      	str	r3, [r2, #0]
            }
            if(lastState1 == YELLOW_LED && return_flag1) {
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <runFsm1+0x2a0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d121      	bne.n	80009ea <runFsm1+0x296>
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <runFsm1+0x2c0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d01d      	beq.n	80009ea <runFsm1+0x296>
                return_flag1 = 0;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <runFsm1+0x2c0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
                status1 = lastState1;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <runFsm1+0x2a0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <runFsm1+0x29c>)
 80009ba:	6013      	str	r3, [r2, #0]
                clearLed();
 80009bc:	f000 fb3a 	bl	8001034 <clearLed>
                setTimer3(100);
 80009c0:	2064      	movs	r0, #100	; 0x64
 80009c2:	f001 f96b 	bl	8001c9c <setTimer3>
                setTimer1(yellow1_duration);
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <runFsm1+0x2bc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 f93e 	bl	8001c4c <setTimer1>
                countdown1 = yellow1_duration / 100;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <runFsm1+0x2bc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a09      	ldr	r2, [pc, #36]	; (80009fc <runFsm1+0x2a8>)
 80009d6:	fb82 1203 	smull	r1, r2, r2, r3
 80009da:	1152      	asrs	r2, r2, #5
 80009dc:	17db      	asrs	r3, r3, #31
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <runFsm1+0x2ac>)
 80009e2:	6013      	str	r3, [r2, #0]
            }
            break;
 80009e4:	e001      	b.n	80009ea <runFsm1+0x296>

        default:
            break;
 80009e6:	bf00      	nop
 80009e8:	e000      	b.n	80009ec <runFsm1+0x298>
            break;
 80009ea:	bf00      	nop
    }
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000004 	.word	0x20000004
 80009f8:	20000014 	.word	0x20000014
 80009fc:	51eb851f 	.word	0x51eb851f
 8000a00:	20000068 	.word	0x20000068
 8000a04:	20000114 	.word	0x20000114
 8000a08:	20000030 	.word	0x20000030
 8000a0c:	2000001c 	.word	0x2000001c
 8000a10:	20000018 	.word	0x20000018
 8000a14:	20000070 	.word	0x20000070

08000a18 <runFsm2>:

void runFsm2(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    switch(status2){
 8000a1c:	4ba5      	ldr	r3, [pc, #660]	; (8000cb4 <runFsm2+0x29c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	2b11      	cmp	r3, #17
 8000a24:	f200 8141 	bhi.w	8000caa <runFsm2+0x292>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <runFsm2+0x18>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a79 	.word	0x08000a79
 8000a34:	08000abd 	.word	0x08000abd
 8000a38:	08000b79 	.word	0x08000b79
 8000a3c:	08000b1b 	.word	0x08000b1b
 8000a40:	08000cab 	.word	0x08000cab
 8000a44:	08000cab 	.word	0x08000cab
 8000a48:	08000cab 	.word	0x08000cab
 8000a4c:	08000cab 	.word	0x08000cab
 8000a50:	08000cab 	.word	0x08000cab
 8000a54:	08000cab 	.word	0x08000cab
 8000a58:	08000cab 	.word	0x08000cab
 8000a5c:	08000cab 	.word	0x08000cab
 8000a60:	08000cab 	.word	0x08000cab
 8000a64:	08000cab 	.word	0x08000cab
 8000a68:	08000cab 	.word	0x08000cab
 8000a6c:	08000cab 	.word	0x08000cab
 8000a70:	08000cab 	.word	0x08000cab
 8000a74:	08000bd7 	.word	0x08000bd7
        case NORMAL:
            setGreen2();
 8000a78:	f000 fa8a 	bl	8000f90 <setGreen2>
            status2 = GREEN_LED;
 8000a7c:	4b8d      	ldr	r3, [pc, #564]	; (8000cb4 <runFsm2+0x29c>)
 8000a7e:	2204      	movs	r2, #4
 8000a80:	601a      	str	r2, [r3, #0]
            lastState2 = status2;
 8000a82:	4b8c      	ldr	r3, [pc, #560]	; (8000cb4 <runFsm2+0x29c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a8c      	ldr	r2, [pc, #560]	; (8000cb8 <runFsm2+0x2a0>)
 8000a88:	6013      	str	r3, [r2, #0]
            setTimer2(green2_duration);
 8000a8a:	4b8c      	ldr	r3, [pc, #560]	; (8000cbc <runFsm2+0x2a4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f8f0 	bl	8001c74 <setTimer2>
            setTimer4(100);
 8000a94:	2064      	movs	r0, #100	; 0x64
 8000a96:	f001 f915 	bl	8001cc4 <setTimer4>
            countdown2 = green2_duration / 100;
 8000a9a:	4b88      	ldr	r3, [pc, #544]	; (8000cbc <runFsm2+0x2a4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a88      	ldr	r2, [pc, #544]	; (8000cc0 <runFsm2+0x2a8>)
 8000aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa4:	1152      	asrs	r2, r2, #5
 8000aa6:	17db      	asrs	r3, r3, #31
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	4a86      	ldr	r2, [pc, #536]	; (8000cc4 <runFsm2+0x2ac>)
 8000aac:	6013      	str	r3, [r2, #0]
            led2 = &countdown2;
 8000aae:	4b86      	ldr	r3, [pc, #536]	; (8000cc8 <runFsm2+0x2b0>)
 8000ab0:	4a84      	ldr	r2, [pc, #528]	; (8000cc4 <runFsm2+0x2ac>)
 8000ab2:	601a      	str	r2, [r3, #0]
            mode = 1;
 8000ab4:	4b85      	ldr	r3, [pc, #532]	; (8000ccc <runFsm2+0x2b4>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
            break;
 8000aba:	e0f9      	b.n	8000cb0 <runFsm2+0x298>

        case RED_LED:
            setRed2();
 8000abc:	f000 fa3c 	bl	8000f38 <setRed2>
            mode = 1;
 8000ac0:	4b82      	ldr	r3, [pc, #520]	; (8000ccc <runFsm2+0x2b4>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
            if(endTimer4()){
 8000ac6:	f001 f9c3 	bl	8001e50 <endTimer4>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d007      	beq.n	8000ae0 <runFsm2+0xc8>
                setTimer4(100);
 8000ad0:	2064      	movs	r0, #100	; 0x64
 8000ad2:	f001 f8f7 	bl	8001cc4 <setTimer4>
                countdown2--;
 8000ad6:	4b7b      	ldr	r3, [pc, #492]	; (8000cc4 <runFsm2+0x2ac>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	4a79      	ldr	r2, [pc, #484]	; (8000cc4 <runFsm2+0x2ac>)
 8000ade:	6013      	str	r3, [r2, #0]
            }
            if(endTimer2() == 1){
 8000ae0:	f001 f992 	bl	8001e08 <endTimer2>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d114      	bne.n	8000b14 <runFsm2+0xfc>
                setTimer2(green2_duration);
 8000aea:	4b74      	ldr	r3, [pc, #464]	; (8000cbc <runFsm2+0x2a4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 f8c0 	bl	8001c74 <setTimer2>
                status2 = GREEN_LED;
 8000af4:	4b6f      	ldr	r3, [pc, #444]	; (8000cb4 <runFsm2+0x29c>)
 8000af6:	2204      	movs	r2, #4
 8000af8:	601a      	str	r2, [r3, #0]
                setTimer4(100);
 8000afa:	2064      	movs	r0, #100	; 0x64
 8000afc:	f001 f8e2 	bl	8001cc4 <setTimer4>
                countdown2 = green2_duration / 100;
 8000b00:	4b6e      	ldr	r3, [pc, #440]	; (8000cbc <runFsm2+0x2a4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a6e      	ldr	r2, [pc, #440]	; (8000cc0 <runFsm2+0x2a8>)
 8000b06:	fb82 1203 	smull	r1, r2, r2, r3
 8000b0a:	1152      	asrs	r2, r2, #5
 8000b0c:	17db      	asrs	r3, r3, #31
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	4a6c      	ldr	r2, [pc, #432]	; (8000cc4 <runFsm2+0x2ac>)
 8000b12:	6013      	str	r3, [r2, #0]
            }
            handleButtonPress();
 8000b14:	f7ff fdde 	bl	80006d4 <handleButtonPress>
            break;
 8000b18:	e0ca      	b.n	8000cb0 <runFsm2+0x298>
        case GREEN_LED:
            mode = 1;
 8000b1a:	4b6c      	ldr	r3, [pc, #432]	; (8000ccc <runFsm2+0x2b4>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
            setGreen2();
 8000b20:	f000 fa36 	bl	8000f90 <setGreen2>
            if(endTimer4()){
 8000b24:	f001 f994 	bl	8001e50 <endTimer4>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <runFsm2+0x126>
                setTimer4(100);
 8000b2e:	2064      	movs	r0, #100	; 0x64
 8000b30:	f001 f8c8 	bl	8001cc4 <setTimer4>
                countdown2--;
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <runFsm2+0x2ac>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a62      	ldr	r2, [pc, #392]	; (8000cc4 <runFsm2+0x2ac>)
 8000b3c:	6013      	str	r3, [r2, #0]
            }
            if(endTimer2() == 1){
 8000b3e:	f001 f963 	bl	8001e08 <endTimer2>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d114      	bne.n	8000b72 <runFsm2+0x15a>
                setTimer2(yellow2_duration);
 8000b48:	4b61      	ldr	r3, [pc, #388]	; (8000cd0 <runFsm2+0x2b8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 f891 	bl	8001c74 <setTimer2>
                status2 = YELLOW_LED;
 8000b52:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <runFsm2+0x29c>)
 8000b54:	2203      	movs	r2, #3
 8000b56:	601a      	str	r2, [r3, #0]
                setTimer4(100);
 8000b58:	2064      	movs	r0, #100	; 0x64
 8000b5a:	f001 f8b3 	bl	8001cc4 <setTimer4>
                countdown2 = yellow2_duration / 100;
 8000b5e:	4b5c      	ldr	r3, [pc, #368]	; (8000cd0 <runFsm2+0x2b8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a57      	ldr	r2, [pc, #348]	; (8000cc0 <runFsm2+0x2a8>)
 8000b64:	fb82 1203 	smull	r1, r2, r2, r3
 8000b68:	1152      	asrs	r2, r2, #5
 8000b6a:	17db      	asrs	r3, r3, #31
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	4a55      	ldr	r2, [pc, #340]	; (8000cc4 <runFsm2+0x2ac>)
 8000b70:	6013      	str	r3, [r2, #0]
            }
            handleButtonPress();
 8000b72:	f7ff fdaf 	bl	80006d4 <handleButtonPress>
            break;
 8000b76:	e09b      	b.n	8000cb0 <runFsm2+0x298>
        case YELLOW_LED:
            mode = 1;
 8000b78:	4b54      	ldr	r3, [pc, #336]	; (8000ccc <runFsm2+0x2b4>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
            setYellow2();
 8000b7e:	f000 f9f1 	bl	8000f64 <setYellow2>
            if(endTimer4()){
 8000b82:	f001 f965 	bl	8001e50 <endTimer4>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d007      	beq.n	8000b9c <runFsm2+0x184>
                setTimer4(100);
 8000b8c:	2064      	movs	r0, #100	; 0x64
 8000b8e:	f001 f899 	bl	8001cc4 <setTimer4>
                countdown2--;
 8000b92:	4b4c      	ldr	r3, [pc, #304]	; (8000cc4 <runFsm2+0x2ac>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	4a4a      	ldr	r2, [pc, #296]	; (8000cc4 <runFsm2+0x2ac>)
 8000b9a:	6013      	str	r3, [r2, #0]
            }
            if(endTimer2() == 1){
 8000b9c:	f001 f934 	bl	8001e08 <endTimer2>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d114      	bne.n	8000bd0 <runFsm2+0x1b8>
                setTimer2(red2_duration);
 8000ba6:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <runFsm2+0x2bc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 f862 	bl	8001c74 <setTimer2>
                status2 = RED_LED;
 8000bb0:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <runFsm2+0x29c>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	601a      	str	r2, [r3, #0]
                setTimer4(100);
 8000bb6:	2064      	movs	r0, #100	; 0x64
 8000bb8:	f001 f884 	bl	8001cc4 <setTimer4>
                countdown2 = red2_duration / 100;
 8000bbc:	4b45      	ldr	r3, [pc, #276]	; (8000cd4 <runFsm2+0x2bc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a3f      	ldr	r2, [pc, #252]	; (8000cc0 <runFsm2+0x2a8>)
 8000bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc6:	1152      	asrs	r2, r2, #5
 8000bc8:	17db      	asrs	r3, r3, #31
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <runFsm2+0x2ac>)
 8000bce:	6013      	str	r3, [r2, #0]
            }
            handleButtonPress();
 8000bd0:	f7ff fd80 	bl	80006d4 <handleButtonPress>
            break;
 8000bd4:	e06c      	b.n	8000cb0 <runFsm2+0x298>
        case DELAY:
            if(lastState2 == RED_LED && return_flag2){
 8000bd6:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <runFsm2+0x2a0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d11e      	bne.n	8000c1c <runFsm2+0x204>
 8000bde:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <runFsm2+0x2c0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d01a      	beq.n	8000c1c <runFsm2+0x204>
                clearLed();
 8000be6:	f000 fa25 	bl	8001034 <clearLed>
                status2 = lastState2;
 8000bea:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <runFsm2+0x2a0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <runFsm2+0x29c>)
 8000bf0:	6013      	str	r3, [r2, #0]
                return_flag2 = 0;
 8000bf2:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <runFsm2+0x2c0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
                setTimer4(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f001 f863 	bl	8001cc4 <setTimer4>
                setTimer2(red2_duration);
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <runFsm2+0x2bc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f836 	bl	8001c74 <setTimer2>
                countdown2 = red2_duration / 100;
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <runFsm2+0x2bc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a2c      	ldr	r2, [pc, #176]	; (8000cc0 <runFsm2+0x2a8>)
 8000c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c12:	1152      	asrs	r2, r2, #5
 8000c14:	17db      	asrs	r3, r3, #31
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	4a2a      	ldr	r2, [pc, #168]	; (8000cc4 <runFsm2+0x2ac>)
 8000c1a:	6013      	str	r3, [r2, #0]
            }
            if(lastState2 == GREEN_LED && return_flag2){
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <runFsm2+0x2a0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d11e      	bne.n	8000c62 <runFsm2+0x24a>
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <runFsm2+0x2c0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d01a      	beq.n	8000c62 <runFsm2+0x24a>
                return_flag2 = 0;
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <runFsm2+0x2c0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
                status2 = lastState2;
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <runFsm2+0x2a0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <runFsm2+0x29c>)
 8000c38:	6013      	str	r3, [r2, #0]
                clearLed();
 8000c3a:	f000 f9fb 	bl	8001034 <clearLed>
                setTimer4(100);
 8000c3e:	2064      	movs	r0, #100	; 0x64
 8000c40:	f001 f840 	bl	8001cc4 <setTimer4>
                setTimer2(green2_duration);
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <runFsm2+0x2a4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 f813 	bl	8001c74 <setTimer2>
                countdown2 = green2_duration / 100;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <runFsm2+0x2a4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <runFsm2+0x2a8>)
 8000c54:	fb82 1203 	smull	r1, r2, r2, r3
 8000c58:	1152      	asrs	r2, r2, #5
 8000c5a:	17db      	asrs	r3, r3, #31
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <runFsm2+0x2ac>)
 8000c60:	6013      	str	r3, [r2, #0]
            }
            if(lastState2 == YELLOW_LED && return_flag2) {
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <runFsm2+0x2a0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d121      	bne.n	8000cae <runFsm2+0x296>
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <runFsm2+0x2c0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d01d      	beq.n	8000cae <runFsm2+0x296>
                return_flag2 = 0;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <runFsm2+0x2c0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
                status2 = lastState2;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <runFsm2+0x2a0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <runFsm2+0x29c>)
 8000c7e:	6013      	str	r3, [r2, #0]
                clearLed();
 8000c80:	f000 f9d8 	bl	8001034 <clearLed>
                setTimer4(100);
 8000c84:	2064      	movs	r0, #100	; 0x64
 8000c86:	f001 f81d 	bl	8001cc4 <setTimer4>
                setTimer2(yellow2_duration);
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <runFsm2+0x2b8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fff0 	bl	8001c74 <setTimer2>
                countdown2 = yellow2_duration / 100;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <runFsm2+0x2b8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <runFsm2+0x2a8>)
 8000c9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c9e:	1152      	asrs	r2, r2, #5
 8000ca0:	17db      	asrs	r3, r3, #31
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <runFsm2+0x2ac>)
 8000ca6:	6013      	str	r3, [r2, #0]
            }
            break;
 8000ca8:	e001      	b.n	8000cae <runFsm2+0x296>
        default:
            break;
 8000caa:	bf00      	nop
 8000cac:	e000      	b.n	8000cb0 <runFsm2+0x298>
            break;
 8000cae:	bf00      	nop
    }
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2000000c 	.word	0x2000000c
 8000cbc:	20000028 	.word	0x20000028
 8000cc0:	51eb851f 	.word	0x51eb851f
 8000cc4:	2000006c 	.word	0x2000006c
 8000cc8:	20000118 	.word	0x20000118
 8000ccc:	20000030 	.word	0x20000030
 8000cd0:	20000024 	.word	0x20000024
 8000cd4:	20000020 	.word	0x20000020
 8000cd8:	20000074 	.word	0x20000074

08000cdc <setButton>:
static uint8_t press1s_flag[NO_OF_BUTTONS];
static uint16_t press1s_counter[NO_OF_BUTTONS];

#define INPUT_PORT GPIOA
uint16_t BUTTON_PIN[NO_OF_BUTTONS] = {0x2000, 0x4000, 0x8000};
void setButton(){
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	e020      	b.n	8000d2a <setButton+0x4e>
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <setButton+0x60>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <setButton+0x64>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer3[i] = BUTTON_IS_RELEASED;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <setButton+0x68>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer4[i] = BUTTON_IS_RELEASED;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <setButton+0x6c>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	54d1      	strb	r1, [r2, r3]
		button_flag[i] = BUTTON_FLAG_RESET;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <setButton+0x70>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		press1s_flag[i] = BUTTON_FLAG_RESET;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <setButton+0x74>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	54d1      	strb	r1, [r2, r3]
		press1s_counter[i] = 0;
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <setButton+0x78>)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	3301      	adds	r3, #1
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d9db      	bls.n	8000ce8 <setButton+0xc>
	}
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000078 	.word	0x20000078
 8000d40:	2000007c 	.word	0x2000007c
 8000d44:	20000080 	.word	0x20000080
 8000d48:	20000084 	.word	0x20000084
 8000d4c:	200000c0 	.word	0x200000c0
 8000d50:	20000088 	.word	0x20000088
 8000d54:	2000008c 	.word	0x2000008c

08000d58 <readButton>:

void readButton(void){
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	e06b      	b.n	8000e3c <readButton+0xe4>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4938      	ldr	r1, [pc, #224]	; (8000e4c <readButton+0xf4>)
 8000d6a:	5c89      	ldrb	r1, [r1, r2]
 8000d6c:	4a38      	ldr	r2, [pc, #224]	; (8000e50 <readButton+0xf8>)
 8000d6e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4937      	ldr	r1, [pc, #220]	; (8000e54 <readButton+0xfc>)
 8000d76:	5c89      	ldrb	r1, [r1, r2]
 8000d78:	4a34      	ldr	r2, [pc, #208]	; (8000e4c <readButton+0xf4>)
 8000d7a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(INPUT_PORT, BUTTON_PIN[i]);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <readButton+0x100>)
 8000d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d84:	79fc      	ldrb	r4, [r7, #7]
 8000d86:	4619      	mov	r1, r3
 8000d88:	4834      	ldr	r0, [pc, #208]	; (8000e5c <readButton+0x104>)
 8000d8a:	f001 fbc3 	bl	8002514 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <readButton+0xfc>)
 8000d94:	551a      	strb	r2, [r3, r4]
		if ((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer3[i])){
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <readButton+0xf4>)
 8000d9a:	5cd2      	ldrb	r2, [r2, r3]
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	492d      	ldr	r1, [pc, #180]	; (8000e54 <readButton+0xfc>)
 8000da0:	5ccb      	ldrb	r3, [r1, r3]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d147      	bne.n	8000e36 <readButton+0xde>
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <readButton+0xf4>)
 8000daa:	5cd2      	ldrb	r2, [r2, r3]
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4928      	ldr	r1, [pc, #160]	; (8000e50 <readButton+0xf8>)
 8000db0:	5ccb      	ldrb	r3, [r1, r3]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d13f      	bne.n	8000e36 <readButton+0xde>
			if (debounceButtonBuffer3[i] != debounceButtonBuffer4[i]){
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <readButton+0xf8>)
 8000dba:	5cd2      	ldrb	r2, [r2, r3]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4928      	ldr	r1, [pc, #160]	; (8000e60 <readButton+0x108>)
 8000dc0:	5ccb      	ldrb	r3, [r1, r3]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d023      	beq.n	8000e0e <readButton+0xb6>
				debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4921      	ldr	r1, [pc, #132]	; (8000e50 <readButton+0xf8>)
 8000dcc:	5c89      	ldrb	r1, [r1, r2]
 8000dce:	4a24      	ldr	r2, [pc, #144]	; (8000e60 <readButton+0x108>)
 8000dd0:	54d1      	strb	r1, [r2, r3]
				if (debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <readButton+0x108>)
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d109      	bne.n	8000df0 <readButton+0x98>
					Max_press = 500;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <readButton+0x10c>)
 8000dde:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000de2:	601a      	str	r2, [r3, #0]
					button_flag[i] = BUTTON_FLAG_SET;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4a20      	ldr	r2, [pc, #128]	; (8000e68 <readButton+0x110>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000dee:	e022      	b.n	8000e36 <readButton+0xde>
				}else{
					Max_press--;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <readButton+0x10c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <readButton+0x10c>)
 8000df8:	6013      	str	r3, [r2, #0]
					press1s_counter[i] = 0;
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <readButton+0x114>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					debounceButtonBuffer4[i] = BUTTON_IS_RELEASED;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <readButton+0x108>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	54d1      	strb	r1, [r2, r3]
 8000e0c:	e013      	b.n	8000e36 <readButton+0xde>
				}
			}else{
				if (press1s_counter[i] < DURATION_FOR_AUTO_INCREASING){
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <readButton+0x114>)
 8000e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e16:	2b63      	cmp	r3, #99	; 0x63
 8000e18:	d809      	bhi.n	8000e2e <readButton+0xd6>
					press1s_counter[i]++;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <readButton+0x114>)
 8000e1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e22:	3201      	adds	r2, #1
 8000e24:	b291      	uxth	r1, r2
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <readButton+0x114>)
 8000e28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e2c:	e003      	b.n	8000e36 <readButton+0xde>
				}else press1s_flag[i] = BUTTON_FLAG_SET;
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <readButton+0x118>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	54d1      	strb	r1, [r2, r3]
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d990      	bls.n	8000d64 <readButton+0xc>
			}
		}
	}
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}
 8000e4c:	2000007c 	.word	0x2000007c
 8000e50:	20000080 	.word	0x20000080
 8000e54:	20000078 	.word	0x20000078
 8000e58:	20000038 	.word	0x20000038
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	20000084 	.word	0x20000084
 8000e64:	20000034 	.word	0x20000034
 8000e68:	200000c0 	.word	0x200000c0
 8000e6c:	2000008c 	.word	0x2000008c
 8000e70:	20000088 	.word	0x20000088

08000e74 <Press_button>:

unsigned char Press_button(unsigned char index){
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <Press_button+0x14>
 8000e84:	2300      	movs	r3, #0
 8000e86:	e00d      	b.n	8000ea4 <Press_button+0x30>
	if (button_flag[index] == BUTTON_FLAG_SET){
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <Press_button+0x3c>)
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d106      	bne.n	8000ea2 <Press_button+0x2e>
		button_flag[index] = BUTTON_FLAG_RESET;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <Press_button+0x3c>)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <Press_button+0x30>
	}else return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200000c0 	.word	0x200000c0

08000eb4 <setRed1>:
 *  Created on: Oct 10, 2025
 *      Author: WINDOWS10
 */

#include "led_display.h"
void setRed1(){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2104      	movs	r1, #4
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <setRed1+0x28>)
 8000ebe:	f001 fb40 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <setRed1+0x28>)
 8000ec8:	f001 fb3b 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2108      	movs	r1, #8
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <setRed1+0x28>)
 8000ed2:	f001 fb36 	bl	8002542 <HAL_GPIO_WritePin>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010800 	.word	0x40010800

08000ee0 <setYellow1>:

void setYellow1(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <setYellow1+0x28>)
 8000eea:	f001 fb2a 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <setYellow1+0x28>)
 8000ef4:	f001 fb25 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2108      	movs	r1, #8
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <setYellow1+0x28>)
 8000efe:	f001 fb20 	bl	8002542 <HAL_GPIO_WritePin>
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010800 	.word	0x40010800

08000f0c <setGreen1>:

void setGreen1(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2104      	movs	r1, #4
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <setGreen1+0x28>)
 8000f16:	f001 fb14 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <setGreen1+0x28>)
 8000f20:	f001 fb0f 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2108      	movs	r1, #8
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <setGreen1+0x28>)
 8000f2a:	f001 fb0a 	bl	8002542 <HAL_GPIO_WritePin>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40010800 	.word	0x40010800

08000f38 <setRed2>:

void setRed2(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2120      	movs	r1, #32
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <setRed2+0x28>)
 8000f42:	f001 fafe 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <setRed2+0x28>)
 8000f4c:	f001 faf9 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <setRed2+0x28>)
 8000f56:	f001 faf4 	bl	8002542 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40010800 	.word	0x40010800

08000f64 <setYellow2>:

void setYellow2(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2120      	movs	r1, #32
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <setYellow2+0x28>)
 8000f6e:	f001 fae8 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <setYellow2+0x28>)
 8000f78:	f001 fae3 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <setYellow2+0x28>)
 8000f82:	f001 fade 	bl	8002542 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010800 	.word	0x40010800

08000f90 <setGreen2>:

void setGreen2(){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2120      	movs	r1, #32
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <setGreen2+0x28>)
 8000f9a:	f001 fad2 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <setGreen2+0x28>)
 8000fa4:	f001 facd 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2140      	movs	r1, #64	; 0x40
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <setGreen2+0x28>)
 8000fae:	f001 fac8 	bl	8002542 <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40010800 	.word	0x40010800

08000fbc <toggleRed1>:

void toggleRed1(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <toggleRed1+0x10>)
 8000fc4:	f001 fad5 	bl	8002572 <HAL_GPIO_TogglePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <toggleYellow1>:
void toggleYellow1(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <toggleYellow1+0x10>)
 8000fd8:	f001 facb 	bl	8002572 <HAL_GPIO_TogglePin>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <toggleGreen1>:
void toggleGreen1(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8000fe8:	2110      	movs	r1, #16
 8000fea:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <toggleGreen1+0x10>)
 8000fec:	f001 fac1 	bl	8002572 <HAL_GPIO_TogglePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <toggleRed2>:
void toggleRed2(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	4802      	ldr	r0, [pc, #8]	; (8001008 <toggleRed2+0x10>)
 8001000:	f001 fab7 	bl	8002572 <HAL_GPIO_TogglePin>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40010800 	.word	0x40010800

0800100c <toggleYellow2>:
void toggleYellow2(){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8001010:	2140      	movs	r1, #64	; 0x40
 8001012:	4802      	ldr	r0, [pc, #8]	; (800101c <toggleYellow2+0x10>)
 8001014:	f001 faad 	bl	8002572 <HAL_GPIO_TogglePin>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010800 	.word	0x40010800

08001020 <toggleGreen2>:
void toggleGreen2(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	4802      	ldr	r0, [pc, #8]	; (8001030 <toggleGreen2+0x10>)
 8001028:	f001 faa3 	bl	8002572 <HAL_GPIO_TogglePin>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40010800 	.word	0x40010800

08001034 <clearLed>:

void clearLed(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2104      	movs	r1, #4
 800103c:	480e      	ldr	r0, [pc, #56]	; (8001078 <clearLed+0x44>)
 800103e:	f001 fa80 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2110      	movs	r1, #16
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <clearLed+0x44>)
 8001048:	f001 fa7b 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2108      	movs	r1, #8
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <clearLed+0x44>)
 8001052:	f001 fa76 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2120      	movs	r1, #32
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <clearLed+0x44>)
 800105c:	f001 fa71 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <clearLed+0x44>)
 8001066:	f001 fa6c 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2140      	movs	r1, #64	; 0x40
 800106e:	4802      	ldr	r0, [pc, #8]	; (8001078 <clearLed+0x44>)
 8001070:	f001 fa67 	bl	8002542 <HAL_GPIO_WritePin>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40010800 	.word	0x40010800

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001080:	f000 ff5e 	bl	8001f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001084:	f000 f814 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001088:	f000 f89a 	bl	80011c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800108c:	f000 f84c 	bl	8001128 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001090:	4806      	ldr	r0, [pc, #24]	; (80010ac <main+0x30>)
 8001092:	f001 feb3 	bl	8002dfc <HAL_TIM_Base_Start_IT>
  systemINIT();
 8001096:	f7ff fae1 	bl	800065c <systemINIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  runFsm1();
 800109a:	f7ff fb5b 	bl	8000754 <runFsm1>
	  runFsm2();
 800109e:	f7ff fcbb 	bl	8000a18 <runFsm2>
	  fsm_modify();
 80010a2:	f7ff f88d 	bl	80001c0 <fsm_modify>
	  update7SEG();
 80010a6:	f000 fca9 	bl	80019fc <update7SEG>
	  runFsm1();
 80010aa:	e7f6      	b.n	800109a <main+0x1e>
 80010ac:	200000cc 	.word	0x200000cc

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	; 0x40
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fa4c 	bl	800355c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d6:	2301      	movs	r3, #1
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010da:	2310      	movs	r3, #16
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010de:	2300      	movs	r3, #0
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fa5c 	bl	80025a4 <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010f2:	f000 f8d5 	bl	80012a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fcc8 	bl	8002aa4 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800111a:	f000 f8c1 	bl	80012a0 <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3740      	adds	r7, #64	; 0x40
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_TIM2_Init+0x94>)
 8001146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <MX_TIM2_Init+0x94>)
 800114e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001152:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_TIM2_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_TIM2_Init+0x94>)
 800115c:	220a      	movs	r2, #10
 800115e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_TIM2_Init+0x94>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_TIM2_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <MX_TIM2_Init+0x94>)
 800116e:	f001 fdf5 	bl	8002d5c <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001178:	f000 f892 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001180:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_TIM2_Init+0x94>)
 800118a:	f001 ff73 	bl	8003074 <HAL_TIM_ConfigClockSource>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001194:	f000 f884 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_TIM2_Init+0x94>)
 80011a6:	f002 f94b 	bl	8003440 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011b0:	f000 f876 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000cc 	.word	0x200000cc

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <MX_GPIO_Init+0xbc>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <MX_GPIO_Init+0xbc>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_GPIO_Init+0xbc>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_GPIO_Init+0xbc>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a22      	ldr	r2, [pc, #136]	; (800127c <MX_GPIO_Init+0xbc>)
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_GPIO_Init+0xbc>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8001204:	2200      	movs	r2, #0
 8001206:	f240 61fc 	movw	r1, #1788	; 0x6fc
 800120a:	481d      	ldr	r0, [pc, #116]	; (8001280 <MX_GPIO_Init+0xc0>)
 800120c:	f001 f999 	bl	8002542 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGA1_Pin|SEGB1_Pin|SEGC1_Pin|SEGD2_Pin
 8001210:	2200      	movs	r2, #0
 8001212:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001216:	481b      	ldr	r0, [pc, #108]	; (8001284 <MX_GPIO_Init+0xc4>)
 8001218:	f001 f993 	bl	8002542 <HAL_GPIO_WritePin>
                          |SEGE1_Pin|SEGF1_Pin|SEGG1_Pin|SEGA2_Pin
                          |SEGB2_Pin|SEGC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800121c:	f240 63fc 	movw	r3, #1788	; 0x6fc
 8001220:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2302      	movs	r3, #2
 800122c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	4619      	mov	r1, r3
 8001234:	4812      	ldr	r0, [pc, #72]	; (8001280 <MX_GPIO_Init+0xc0>)
 8001236:	f000 fff3 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGA1_Pin SEGB1_Pin SEGC1_Pin SEGD2_Pin
                           SEGE2_Pin SEGF2_Pin SEGG2_Pin SEGD1_Pin
                           SEGE1_Pin SEGF1_Pin SEGG1_Pin SEGA2_Pin
                           SEGB2_Pin SEGC2_Pin */
  GPIO_InitStruct.Pin = SEGA1_Pin|SEGB1_Pin|SEGC1_Pin|SEGD2_Pin
 800123a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800123e:	60bb      	str	r3, [r7, #8]
                          |SEGE2_Pin|SEGF2_Pin|SEGG2_Pin|SEGD1_Pin
                          |SEGE1_Pin|SEGF1_Pin|SEGG1_Pin|SEGA2_Pin
                          |SEGB2_Pin|SEGC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2302      	movs	r3, #2
 800124a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_GPIO_Init+0xc4>)
 8001254:	f000 ffe4 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT0_Pin BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT0_Pin|BUT1_Pin|BUT2_Pin;
 8001258:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800125c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001262:	2301      	movs	r3, #1
 8001264:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4619      	mov	r1, r3
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0xc0>)
 800126e:	f000 ffd7 	bl	8002220 <HAL_GPIO_Init>

}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40010800 	.word	0x40010800
 8001284:	40010c00 	.word	0x40010c00

08001288 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001290:	f000 fd2c 	bl	8001cec <timerRun>
	readButton();
 8001294:	f7ff fd60 	bl	8000d58 <readButton>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <display7SEG1>:
 */

#include "segment_display.h"
#include "global.h"

void display7SEG1 (int num){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b09      	cmp	r3, #9
 80012b8:	f200 8180 	bhi.w	80015bc <display7SEG1+0x310>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <display7SEG1+0x18>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012ed 	.word	0x080012ed
 80012c8:	08001335 	.word	0x08001335
 80012cc:	0800137d 	.word	0x0800137d
 80012d0:	080013c5 	.word	0x080013c5
 80012d4:	0800140d 	.word	0x0800140d
 80012d8:	08001455 	.word	0x08001455
 80012dc:	0800149d 	.word	0x0800149d
 80012e0:	080014e5 	.word	0x080014e5
 80012e4:	0800152d 	.word	0x0800152d
 80012e8:	08001575 	.word	0x08001575
	switch (num){
	case 0:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2101      	movs	r1, #1
 80012f0:	48c6      	ldr	r0, [pc, #792]	; (800160c <display7SEG1+0x360>)
 80012f2:	f001 f926 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2102      	movs	r1, #2
 80012fa:	48c4      	ldr	r0, [pc, #784]	; (800160c <display7SEG1+0x360>)
 80012fc:	f001 f921 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2104      	movs	r1, #4
 8001304:	48c1      	ldr	r0, [pc, #772]	; (800160c <display7SEG1+0x360>)
 8001306:	f001 f91c 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2108      	movs	r1, #8
 800130e:	48bf      	ldr	r0, [pc, #764]	; (800160c <display7SEG1+0x360>)
 8001310:	f001 f917 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2110      	movs	r1, #16
 8001318:	48bc      	ldr	r0, [pc, #752]	; (800160c <display7SEG1+0x360>)
 800131a:	f001 f912 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2120      	movs	r1, #32
 8001322:	48ba      	ldr	r0, [pc, #744]	; (800160c <display7SEG1+0x360>)
 8001324:	f001 f90d 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	48b7      	ldr	r0, [pc, #732]	; (800160c <display7SEG1+0x360>)
 800132e:	f001 f908 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 8001332:	e167      	b.n	8001604 <display7SEG1+0x358>
		case 1:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2101      	movs	r1, #1
 8001338:	48b4      	ldr	r0, [pc, #720]	; (800160c <display7SEG1+0x360>)
 800133a:	f001 f902 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2102      	movs	r1, #2
 8001342:	48b2      	ldr	r0, [pc, #712]	; (800160c <display7SEG1+0x360>)
 8001344:	f001 f8fd 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2104      	movs	r1, #4
 800134c:	48af      	ldr	r0, [pc, #700]	; (800160c <display7SEG1+0x360>)
 800134e:	f001 f8f8 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2108      	movs	r1, #8
 8001356:	48ad      	ldr	r0, [pc, #692]	; (800160c <display7SEG1+0x360>)
 8001358:	f001 f8f3 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, SET);
 800135c:	2201      	movs	r2, #1
 800135e:	2110      	movs	r1, #16
 8001360:	48aa      	ldr	r0, [pc, #680]	; (800160c <display7SEG1+0x360>)
 8001362:	f001 f8ee 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2120      	movs	r1, #32
 800136a:	48a8      	ldr	r0, [pc, #672]	; (800160c <display7SEG1+0x360>)
 800136c:	f001 f8e9 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	48a5      	ldr	r0, [pc, #660]	; (800160c <display7SEG1+0x360>)
 8001376:	f001 f8e4 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 800137a:	e143      	b.n	8001604 <display7SEG1+0x358>
		case 2:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	48a2      	ldr	r0, [pc, #648]	; (800160c <display7SEG1+0x360>)
 8001382:	f001 f8de 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2102      	movs	r1, #2
 800138a:	48a0      	ldr	r0, [pc, #640]	; (800160c <display7SEG1+0x360>)
 800138c:	f001 f8d9 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2104      	movs	r1, #4
 8001394:	489d      	ldr	r0, [pc, #628]	; (800160c <display7SEG1+0x360>)
 8001396:	f001 f8d4 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2108      	movs	r1, #8
 800139e:	489b      	ldr	r0, [pc, #620]	; (800160c <display7SEG1+0x360>)
 80013a0:	f001 f8cf 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2110      	movs	r1, #16
 80013a8:	4898      	ldr	r0, [pc, #608]	; (800160c <display7SEG1+0x360>)
 80013aa:	f001 f8ca 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2120      	movs	r1, #32
 80013b2:	4896      	ldr	r0, [pc, #600]	; (800160c <display7SEG1+0x360>)
 80013b4:	f001 f8c5 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	4893      	ldr	r0, [pc, #588]	; (800160c <display7SEG1+0x360>)
 80013be:	f001 f8c0 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 80013c2:	e11f      	b.n	8001604 <display7SEG1+0x358>
		case 3:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2101      	movs	r1, #1
 80013c8:	4890      	ldr	r0, [pc, #576]	; (800160c <display7SEG1+0x360>)
 80013ca:	f001 f8ba 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2102      	movs	r1, #2
 80013d2:	488e      	ldr	r0, [pc, #568]	; (800160c <display7SEG1+0x360>)
 80013d4:	f001 f8b5 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2104      	movs	r1, #4
 80013dc:	488b      	ldr	r0, [pc, #556]	; (800160c <display7SEG1+0x360>)
 80013de:	f001 f8b0 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2108      	movs	r1, #8
 80013e6:	4889      	ldr	r0, [pc, #548]	; (800160c <display7SEG1+0x360>)
 80013e8:	f001 f8ab 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2110      	movs	r1, #16
 80013f0:	4886      	ldr	r0, [pc, #536]	; (800160c <display7SEG1+0x360>)
 80013f2:	f001 f8a6 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2120      	movs	r1, #32
 80013fa:	4884      	ldr	r0, [pc, #528]	; (800160c <display7SEG1+0x360>)
 80013fc:	f001 f8a1 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	4881      	ldr	r0, [pc, #516]	; (800160c <display7SEG1+0x360>)
 8001406:	f001 f89c 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 800140a:	e0fb      	b.n	8001604 <display7SEG1+0x358>
		case 4:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2101      	movs	r1, #1
 8001410:	487e      	ldr	r0, [pc, #504]	; (800160c <display7SEG1+0x360>)
 8001412:	f001 f896 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2102      	movs	r1, #2
 800141a:	487c      	ldr	r0, [pc, #496]	; (800160c <display7SEG1+0x360>)
 800141c:	f001 f891 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2104      	movs	r1, #4
 8001424:	4879      	ldr	r0, [pc, #484]	; (800160c <display7SEG1+0x360>)
 8001426:	f001 f88c 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2108      	movs	r1, #8
 800142e:	4877      	ldr	r0, [pc, #476]	; (800160c <display7SEG1+0x360>)
 8001430:	f001 f887 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2110      	movs	r1, #16
 8001438:	4874      	ldr	r0, [pc, #464]	; (800160c <display7SEG1+0x360>)
 800143a:	f001 f882 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2120      	movs	r1, #32
 8001442:	4872      	ldr	r0, [pc, #456]	; (800160c <display7SEG1+0x360>)
 8001444:	f001 f87d 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	486f      	ldr	r0, [pc, #444]	; (800160c <display7SEG1+0x360>)
 800144e:	f001 f878 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 8001452:	e0d7      	b.n	8001604 <display7SEG1+0x358>
		case 5:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2101      	movs	r1, #1
 8001458:	486c      	ldr	r0, [pc, #432]	; (800160c <display7SEG1+0x360>)
 800145a:	f001 f872 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, SET);
 800145e:	2201      	movs	r2, #1
 8001460:	2102      	movs	r1, #2
 8001462:	486a      	ldr	r0, [pc, #424]	; (800160c <display7SEG1+0x360>)
 8001464:	f001 f86d 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2104      	movs	r1, #4
 800146c:	4867      	ldr	r0, [pc, #412]	; (800160c <display7SEG1+0x360>)
 800146e:	f001 f868 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2108      	movs	r1, #8
 8001476:	4865      	ldr	r0, [pc, #404]	; (800160c <display7SEG1+0x360>)
 8001478:	f001 f863 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2110      	movs	r1, #16
 8001480:	4862      	ldr	r0, [pc, #392]	; (800160c <display7SEG1+0x360>)
 8001482:	f001 f85e 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2120      	movs	r1, #32
 800148a:	4860      	ldr	r0, [pc, #384]	; (800160c <display7SEG1+0x360>)
 800148c:	f001 f859 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2140      	movs	r1, #64	; 0x40
 8001494:	485d      	ldr	r0, [pc, #372]	; (800160c <display7SEG1+0x360>)
 8001496:	f001 f854 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 800149a:	e0b3      	b.n	8001604 <display7SEG1+0x358>
		case 6:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2101      	movs	r1, #1
 80014a0:	485a      	ldr	r0, [pc, #360]	; (800160c <display7SEG1+0x360>)
 80014a2:	f001 f84e 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2102      	movs	r1, #2
 80014aa:	4858      	ldr	r0, [pc, #352]	; (800160c <display7SEG1+0x360>)
 80014ac:	f001 f849 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2104      	movs	r1, #4
 80014b4:	4855      	ldr	r0, [pc, #340]	; (800160c <display7SEG1+0x360>)
 80014b6:	f001 f844 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2108      	movs	r1, #8
 80014be:	4853      	ldr	r0, [pc, #332]	; (800160c <display7SEG1+0x360>)
 80014c0:	f001 f83f 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	4850      	ldr	r0, [pc, #320]	; (800160c <display7SEG1+0x360>)
 80014ca:	f001 f83a 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2120      	movs	r1, #32
 80014d2:	484e      	ldr	r0, [pc, #312]	; (800160c <display7SEG1+0x360>)
 80014d4:	f001 f835 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2140      	movs	r1, #64	; 0x40
 80014dc:	484b      	ldr	r0, [pc, #300]	; (800160c <display7SEG1+0x360>)
 80014de:	f001 f830 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 80014e2:	e08f      	b.n	8001604 <display7SEG1+0x358>
		case 7:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2101      	movs	r1, #1
 80014e8:	4848      	ldr	r0, [pc, #288]	; (800160c <display7SEG1+0x360>)
 80014ea:	f001 f82a 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2102      	movs	r1, #2
 80014f2:	4846      	ldr	r0, [pc, #280]	; (800160c <display7SEG1+0x360>)
 80014f4:	f001 f825 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2104      	movs	r1, #4
 80014fc:	4843      	ldr	r0, [pc, #268]	; (800160c <display7SEG1+0x360>)
 80014fe:	f001 f820 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2108      	movs	r1, #8
 8001506:	4841      	ldr	r0, [pc, #260]	; (800160c <display7SEG1+0x360>)
 8001508:	f001 f81b 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, SET);
 800150c:	2201      	movs	r2, #1
 800150e:	2110      	movs	r1, #16
 8001510:	483e      	ldr	r0, [pc, #248]	; (800160c <display7SEG1+0x360>)
 8001512:	f001 f816 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, SET);
 8001516:	2201      	movs	r2, #1
 8001518:	2120      	movs	r1, #32
 800151a:	483c      	ldr	r0, [pc, #240]	; (800160c <display7SEG1+0x360>)
 800151c:	f001 f811 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	4839      	ldr	r0, [pc, #228]	; (800160c <display7SEG1+0x360>)
 8001526:	f001 f80c 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 800152a:	e06b      	b.n	8001604 <display7SEG1+0x358>
		case 8:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2101      	movs	r1, #1
 8001530:	4836      	ldr	r0, [pc, #216]	; (800160c <display7SEG1+0x360>)
 8001532:	f001 f806 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2102      	movs	r1, #2
 800153a:	4834      	ldr	r0, [pc, #208]	; (800160c <display7SEG1+0x360>)
 800153c:	f001 f801 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2104      	movs	r1, #4
 8001544:	4831      	ldr	r0, [pc, #196]	; (800160c <display7SEG1+0x360>)
 8001546:	f000 fffc 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2108      	movs	r1, #8
 800154e:	482f      	ldr	r0, [pc, #188]	; (800160c <display7SEG1+0x360>)
 8001550:	f000 fff7 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2110      	movs	r1, #16
 8001558:	482c      	ldr	r0, [pc, #176]	; (800160c <display7SEG1+0x360>)
 800155a:	f000 fff2 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2120      	movs	r1, #32
 8001562:	482a      	ldr	r0, [pc, #168]	; (800160c <display7SEG1+0x360>)
 8001564:	f000 ffed 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2140      	movs	r1, #64	; 0x40
 800156c:	4827      	ldr	r0, [pc, #156]	; (800160c <display7SEG1+0x360>)
 800156e:	f000 ffe8 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 8001572:	e047      	b.n	8001604 <display7SEG1+0x358>
		case 9:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2101      	movs	r1, #1
 8001578:	4824      	ldr	r0, [pc, #144]	; (800160c <display7SEG1+0x360>)
 800157a:	f000 ffe2 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2102      	movs	r1, #2
 8001582:	4822      	ldr	r0, [pc, #136]	; (800160c <display7SEG1+0x360>)
 8001584:	f000 ffdd 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2104      	movs	r1, #4
 800158c:	481f      	ldr	r0, [pc, #124]	; (800160c <display7SEG1+0x360>)
 800158e:	f000 ffd8 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2108      	movs	r1, #8
 8001596:	481d      	ldr	r0, [pc, #116]	; (800160c <display7SEG1+0x360>)
 8001598:	f000 ffd3 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2110      	movs	r1, #16
 80015a0:	481a      	ldr	r0, [pc, #104]	; (800160c <display7SEG1+0x360>)
 80015a2:	f000 ffce 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2120      	movs	r1, #32
 80015aa:	4818      	ldr	r0, [pc, #96]	; (800160c <display7SEG1+0x360>)
 80015ac:	f000 ffc9 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	4815      	ldr	r0, [pc, #84]	; (800160c <display7SEG1+0x360>)
 80015b6:	f000 ffc4 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 80015ba:	e023      	b.n	8001604 <display7SEG1+0x358>
		default:
				HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	2101      	movs	r1, #1
 80015c0:	4812      	ldr	r0, [pc, #72]	; (800160c <display7SEG1+0x360>)
 80015c2:	f000 ffbe 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2102      	movs	r1, #2
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <display7SEG1+0x360>)
 80015cc:	f000 ffb9 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2104      	movs	r1, #4
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <display7SEG1+0x360>)
 80015d6:	f000 ffb4 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGD1_GPIO_Port, SEGD1_Pin, SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	2108      	movs	r1, #8
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <display7SEG1+0x360>)
 80015e0:	f000 ffaf 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGE1_GPIO_Port, SEGE1_Pin, SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2110      	movs	r1, #16
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <display7SEG1+0x360>)
 80015ea:	f000 ffaa 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGF1_GPIO_Port, SEGF1_Pin, SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2120      	movs	r1, #32
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <display7SEG1+0x360>)
 80015f4:	f000 ffa5 	bl	8002542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEGG1_GPIO_Port, SEGG1_Pin, SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2140      	movs	r1, #64	; 0x40
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <display7SEG1+0x360>)
 80015fe:	f000 ffa0 	bl	8002542 <HAL_GPIO_WritePin>
				break;
 8001602:	bf00      	nop
		}
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40010c00 	.word	0x40010c00

08001610 <display7SEG2>:

void display7SEG2(int num) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b09      	cmp	r3, #9
 800161c:	f200 81be 	bhi.w	800199c <display7SEG2+0x38c>
 8001620:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <display7SEG2+0x18>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	08001651 	.word	0x08001651
 800162c:	080016a5 	.word	0x080016a5
 8001630:	080016f9 	.word	0x080016f9
 8001634:	0800174d 	.word	0x0800174d
 8001638:	080017a1 	.word	0x080017a1
 800163c:	080017f5 	.word	0x080017f5
 8001640:	08001849 	.word	0x08001849
 8001644:	0800189d 	.word	0x0800189d
 8001648:	080018f1 	.word	0x080018f1
 800164c:	08001945 	.word	0x08001945
    switch (num){
    case 0:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	48d0      	ldr	r0, [pc, #832]	; (8001998 <display7SEG2+0x388>)
 8001656:	f000 ff74 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001660:	48cd      	ldr	r0, [pc, #820]	; (8001998 <display7SEG2+0x388>)
 8001662:	f000 ff6e 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	48ca      	ldr	r0, [pc, #808]	; (8001998 <display7SEG2+0x388>)
 800166e:	f000 ff68 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001678:	48c7      	ldr	r0, [pc, #796]	; (8001998 <display7SEG2+0x388>)
 800167a:	f000 ff62 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001684:	48c4      	ldr	r0, [pc, #784]	; (8001998 <display7SEG2+0x388>)
 8001686:	f000 ff5c 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001690:	48c1      	ldr	r0, [pc, #772]	; (8001998 <display7SEG2+0x388>)
 8001692:	f000 ff56 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	48be      	ldr	r0, [pc, #760]	; (8001998 <display7SEG2+0x388>)
 800169e:	f000 ff50 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 80016a2:	e1a5      	b.n	80019f0 <display7SEG2+0x3e0>
    case 1:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	48bb      	ldr	r0, [pc, #748]	; (8001998 <display7SEG2+0x388>)
 80016aa:	f000 ff4a 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b4:	48b8      	ldr	r0, [pc, #736]	; (8001998 <display7SEG2+0x388>)
 80016b6:	f000 ff44 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c0:	48b5      	ldr	r0, [pc, #724]	; (8001998 <display7SEG2+0x388>)
 80016c2:	f000 ff3e 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016cc:	48b2      	ldr	r0, [pc, #712]	; (8001998 <display7SEG2+0x388>)
 80016ce:	f000 ff38 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d8:	48af      	ldr	r0, [pc, #700]	; (8001998 <display7SEG2+0x388>)
 80016da:	f000 ff32 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e4:	48ac      	ldr	r0, [pc, #688]	; (8001998 <display7SEG2+0x388>)
 80016e6:	f000 ff2c 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f0:	48a9      	ldr	r0, [pc, #676]	; (8001998 <display7SEG2+0x388>)
 80016f2:	f000 ff26 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 80016f6:	e17b      	b.n	80019f0 <display7SEG2+0x3e0>
    case 2:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	48a6      	ldr	r0, [pc, #664]	; (8001998 <display7SEG2+0x388>)
 80016fe:	f000 ff20 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001708:	48a3      	ldr	r0, [pc, #652]	; (8001998 <display7SEG2+0x388>)
 800170a:	f000 ff1a 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGD2_Pin, SET);
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001714:	48a0      	ldr	r0, [pc, #640]	; (8001998 <display7SEG2+0x388>)
 8001716:	f000 ff14 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001720:	489d      	ldr	r0, [pc, #628]	; (8001998 <display7SEG2+0x388>)
 8001722:	f000 ff0e 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172c:	489a      	ldr	r0, [pc, #616]	; (8001998 <display7SEG2+0x388>)
 800172e:	f000 ff08 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, SET);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001738:	4897      	ldr	r0, [pc, #604]	; (8001998 <display7SEG2+0x388>)
 800173a:	f000 ff02 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001744:	4894      	ldr	r0, [pc, #592]	; (8001998 <display7SEG2+0x388>)
 8001746:	f000 fefc 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 800174a:	e151      	b.n	80019f0 <display7SEG2+0x3e0>
    case 3:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA1_Pin, RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	2101      	movs	r1, #1
 8001750:	4891      	ldr	r0, [pc, #580]	; (8001998 <display7SEG2+0x388>)
 8001752:	f000 fef6 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175c:	488e      	ldr	r0, [pc, #568]	; (8001998 <display7SEG2+0x388>)
 800175e:	f000 fef0 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	488b      	ldr	r0, [pc, #556]	; (8001998 <display7SEG2+0x388>)
 800176a:	f000 feea 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001774:	4888      	ldr	r0, [pc, #544]	; (8001998 <display7SEG2+0x388>)
 8001776:	f000 fee4 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	4885      	ldr	r0, [pc, #532]	; (8001998 <display7SEG2+0x388>)
 8001782:	f000 fede 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178c:	4882      	ldr	r0, [pc, #520]	; (8001998 <display7SEG2+0x388>)
 800178e:	f000 fed8 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001798:	487f      	ldr	r0, [pc, #508]	; (8001998 <display7SEG2+0x388>)
 800179a:	f000 fed2 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 800179e:	e127      	b.n	80019f0 <display7SEG2+0x3e0>
    case 4:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	487c      	ldr	r0, [pc, #496]	; (8001998 <display7SEG2+0x388>)
 80017a6:	f000 fecc 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b0:	4879      	ldr	r0, [pc, #484]	; (8001998 <display7SEG2+0x388>)
 80017b2:	f000 fec6 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017bc:	4876      	ldr	r0, [pc, #472]	; (8001998 <display7SEG2+0x388>)
 80017be:	f000 fec0 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c8:	4873      	ldr	r0, [pc, #460]	; (8001998 <display7SEG2+0x388>)
 80017ca:	f000 feba 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d4:	4870      	ldr	r0, [pc, #448]	; (8001998 <display7SEG2+0x388>)
 80017d6:	f000 feb4 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e0:	486d      	ldr	r0, [pc, #436]	; (8001998 <display7SEG2+0x388>)
 80017e2:	f000 feae 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ec:	486a      	ldr	r0, [pc, #424]	; (8001998 <display7SEG2+0x388>)
 80017ee:	f000 fea8 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 80017f2:	e0fd      	b.n	80019f0 <display7SEG2+0x3e0>
    case 5:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	4867      	ldr	r0, [pc, #412]	; (8001998 <display7SEG2+0x388>)
 80017fa:	f000 fea2 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001804:	4864      	ldr	r0, [pc, #400]	; (8001998 <display7SEG2+0x388>)
 8001806:	f000 fe9c 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001810:	4861      	ldr	r0, [pc, #388]	; (8001998 <display7SEG2+0x388>)
 8001812:	f000 fe96 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800181c:	485e      	ldr	r0, [pc, #376]	; (8001998 <display7SEG2+0x388>)
 800181e:	f000 fe90 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, SET);
 8001822:	2201      	movs	r2, #1
 8001824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001828:	485b      	ldr	r0, [pc, #364]	; (8001998 <display7SEG2+0x388>)
 800182a:	f000 fe8a 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001834:	4858      	ldr	r0, [pc, #352]	; (8001998 <display7SEG2+0x388>)
 8001836:	f000 fe84 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001840:	4855      	ldr	r0, [pc, #340]	; (8001998 <display7SEG2+0x388>)
 8001842:	f000 fe7e 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 8001846:	e0d3      	b.n	80019f0 <display7SEG2+0x3e0>
    case 6:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2180      	movs	r1, #128	; 0x80
 800184c:	4852      	ldr	r0, [pc, #328]	; (8001998 <display7SEG2+0x388>)
 800184e:	f000 fe78 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, SET);
 8001852:	2201      	movs	r2, #1
 8001854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001858:	484f      	ldr	r0, [pc, #316]	; (8001998 <display7SEG2+0x388>)
 800185a:	f000 fe72 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001864:	484c      	ldr	r0, [pc, #304]	; (8001998 <display7SEG2+0x388>)
 8001866:	f000 fe6c 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001870:	4849      	ldr	r0, [pc, #292]	; (8001998 <display7SEG2+0x388>)
 8001872:	f000 fe66 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800187c:	4846      	ldr	r0, [pc, #280]	; (8001998 <display7SEG2+0x388>)
 800187e:	f000 fe60 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001888:	4843      	ldr	r0, [pc, #268]	; (8001998 <display7SEG2+0x388>)
 800188a:	f000 fe5a 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001894:	4840      	ldr	r0, [pc, #256]	; (8001998 <display7SEG2+0x388>)
 8001896:	f000 fe54 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 800189a:	e0a9      	b.n	80019f0 <display7SEG2+0x3e0>
    case 7:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	483d      	ldr	r0, [pc, #244]	; (8001998 <display7SEG2+0x388>)
 80018a2:	f000 fe4e 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ac:	483a      	ldr	r0, [pc, #232]	; (8001998 <display7SEG2+0x388>)
 80018ae:	f000 fe48 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b8:	4837      	ldr	r0, [pc, #220]	; (8001998 <display7SEG2+0x388>)
 80018ba:	f000 fe42 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, SET);
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c4:	4834      	ldr	r0, [pc, #208]	; (8001998 <display7SEG2+0x388>)
 80018c6:	f000 fe3c 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d0:	4831      	ldr	r0, [pc, #196]	; (8001998 <display7SEG2+0x388>)
 80018d2:	f000 fe36 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018dc:	482e      	ldr	r0, [pc, #184]	; (8001998 <display7SEG2+0x388>)
 80018de:	f000 fe30 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e8:	482b      	ldr	r0, [pc, #172]	; (8001998 <display7SEG2+0x388>)
 80018ea:	f000 fe2a 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 80018ee:	e07f      	b.n	80019f0 <display7SEG2+0x3e0>
    case 8:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	4828      	ldr	r0, [pc, #160]	; (8001998 <display7SEG2+0x388>)
 80018f6:	f000 fe24 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001900:	4825      	ldr	r0, [pc, #148]	; (8001998 <display7SEG2+0x388>)
 8001902:	f000 fe1e 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800190c:	4822      	ldr	r0, [pc, #136]	; (8001998 <display7SEG2+0x388>)
 800190e:	f000 fe18 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001918:	481f      	ldr	r0, [pc, #124]	; (8001998 <display7SEG2+0x388>)
 800191a:	f000 fe12 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001924:	481c      	ldr	r0, [pc, #112]	; (8001998 <display7SEG2+0x388>)
 8001926:	f000 fe0c 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	4819      	ldr	r0, [pc, #100]	; (8001998 <display7SEG2+0x388>)
 8001932:	f000 fe06 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193c:	4816      	ldr	r0, [pc, #88]	; (8001998 <display7SEG2+0x388>)
 800193e:	f000 fe00 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 8001942:	e055      	b.n	80019f0 <display7SEG2+0x3e0>
    case 9:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	4813      	ldr	r0, [pc, #76]	; (8001998 <display7SEG2+0x388>)
 800194a:	f000 fdfa 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001954:	4810      	ldr	r0, [pc, #64]	; (8001998 <display7SEG2+0x388>)
 8001956:	f000 fdf4 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <display7SEG2+0x388>)
 8001962:	f000 fdee 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <display7SEG2+0x388>)
 800196e:	f000 fde8 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, SET);
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <display7SEG2+0x388>)
 800197a:	f000 fde2 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <display7SEG2+0x388>)
 8001986:	f000 fddc 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001990:	4801      	ldr	r0, [pc, #4]	; (8001998 <display7SEG2+0x388>)
 8001992:	f000 fdd6 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 8001996:	e02b      	b.n	80019f0 <display7SEG2+0x3e0>
 8001998:	40010c00 	.word	0x40010c00
    default:
    		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, SET);
 800199c:	2201      	movs	r2, #1
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	4815      	ldr	r0, [pc, #84]	; (80019f8 <display7SEG2+0x3e8>)
 80019a2:	f000 fdce 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ac:	4812      	ldr	r0, [pc, #72]	; (80019f8 <display7SEG2+0x3e8>)
 80019ae:	f000 fdc8 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b8:	480f      	ldr	r0, [pc, #60]	; (80019f8 <display7SEG2+0x3e8>)
 80019ba:	f000 fdc2 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGD2_GPIO_Port, SEGD2_Pin, SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <display7SEG2+0x3e8>)
 80019c6:	f000 fdbc 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGE2_GPIO_Port, SEGE2_Pin, SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <display7SEG2+0x3e8>)
 80019d2:	f000 fdb6 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGF2_GPIO_Port, SEGF2_Pin, SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	4806      	ldr	r0, [pc, #24]	; (80019f8 <display7SEG2+0x3e8>)
 80019de:	f000 fdb0 	bl	8002542 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(SEGG2_GPIO_Port, SEGG2_Pin, SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <display7SEG2+0x3e8>)
 80019ea:	f000 fdaa 	bl	8002542 <HAL_GPIO_WritePin>
    		break;
 80019ee:	bf00      	nop
    }
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40010c00 	.word	0x40010c00

080019fc <update7SEG>:

int * led1;
int * led2;
int led_index = 0;
void update7SEG(){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	if (endTimer0()){
 8001a00:	f000 f9de 	bl	8001dc0 <endTimer0>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d06f      	beq.n	8001aea <update7SEG+0xee>
		setTimer0(10);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f000 f90a 	bl	8001c24 <setTimer0>
		switch(led_index){
 8001a10:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <update7SEG+0xf4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <update7SEG+0x22>
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d02e      	beq.n	8001a7a <update7SEG+0x7e>
			display7SEG2(*led2 / 10);
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
			break;
		default:
			break;
 8001a1c:	e05b      	b.n	8001ad6 <update7SEG+0xda>
			SEG_PORT->ODR = 0xffff;
 8001a1e:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <update7SEG+0xf8>)
 8001a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a24:	60da      	str	r2, [r3, #12]
			display7SEG1(*led1 % 10);
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <update7SEG+0xfc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <update7SEG+0x100>)
 8001a2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a32:	1099      	asrs	r1, r3, #2
 8001a34:	17d3      	asrs	r3, r2, #31
 8001a36:	1ac9      	subs	r1, r1, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	1ad1      	subs	r1, r2, r3
 8001a42:	4608      	mov	r0, r1
 8001a44:	f7ff fc32 	bl	80012ac <display7SEG1>
			display7SEG2(*led1 / 10);
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <update7SEG+0xfc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <update7SEG+0x100>)
 8001a50:	fb82 1203 	smull	r1, r2, r2, r3
 8001a54:	1092      	asrs	r2, r2, #2
 8001a56:	17db      	asrs	r3, r3, #31
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fdd8 	bl	8001610 <display7SEG2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a66:	4826      	ldr	r0, [pc, #152]	; (8001b00 <update7SEG+0x104>)
 8001a68:	f000 fd6b 	bl	8002542 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a72:	4823      	ldr	r0, [pc, #140]	; (8001b00 <update7SEG+0x104>)
 8001a74:	f000 fd65 	bl	8002542 <HAL_GPIO_WritePin>
			break;
 8001a78:	e02d      	b.n	8001ad6 <update7SEG+0xda>
			SEG_PORT->ODR = 0xffff;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <update7SEG+0xf8>)
 8001a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a80:	60da      	str	r2, [r3, #12]
			display7SEG1(*led2 % 10);
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <update7SEG+0x108>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <update7SEG+0x100>)
 8001a8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001a8e:	1099      	asrs	r1, r3, #2
 8001a90:	17d3      	asrs	r3, r2, #31
 8001a92:	1ac9      	subs	r1, r1, r3
 8001a94:	460b      	mov	r3, r1
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	1ad1      	subs	r1, r2, r3
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	f7ff fc04 	bl	80012ac <display7SEG1>
			display7SEG2(*led2 / 10);
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <update7SEG+0x108>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a14      	ldr	r2, [pc, #80]	; (8001afc <update7SEG+0x100>)
 8001aac:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab0:	1092      	asrs	r2, r2, #2
 8001ab2:	17db      	asrs	r3, r3, #31
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fdaa 	bl	8001610 <display7SEG2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac2:	480f      	ldr	r0, [pc, #60]	; (8001b00 <update7SEG+0x104>)
 8001ac4:	f000 fd3d 	bl	8002542 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ace:	480c      	ldr	r0, [pc, #48]	; (8001b00 <update7SEG+0x104>)
 8001ad0:	f000 fd37 	bl	8002542 <HAL_GPIO_WritePin>
			break;
 8001ad4:	bf00      	nop
		}
		led_index = (led_index + 1) % 2;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <update7SEG+0xf4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	bfb8      	it	lt
 8001ae4:	425b      	neglt	r3, r3
 8001ae6:	4a02      	ldr	r2, [pc, #8]	; (8001af0 <update7SEG+0xf4>)
 8001ae8:	6013      	str	r3, [r2, #0]
	}
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000094 	.word	0x20000094
 8001af4:	40010c00 	.word	0x40010c00
 8001af8:	20000114 	.word	0x20000114
 8001afc:	66666667 	.word	0x66666667
 8001b00:	40010800 	.word	0x40010800
 8001b04:	20000118 	.word	0x20000118

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6193      	str	r3, [r2, #24]
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_MspInit+0x5c>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_MspInit+0x60>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_MspInit+0x60>)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000

08001b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7c:	d113      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_TIM_Base_MspInit+0x44>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <HAL_TIM_Base_MspInit+0x44>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_TIM_Base_MspInit+0x44>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	201c      	movs	r0, #28
 8001b9c:	f000 fb09 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ba0:	201c      	movs	r0, #28
 8001ba2:	f000 fb22 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f9e7 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <TIM2_IRQHandler+0x10>)
 8001c0a:	f001 f943 	bl	8002e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200000cc 	.word	0x200000cc

08001c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <setTimer0>:
int timer1_flag = 0;
int timer2_flag = 0;
int timer3_flag = 0;
int timer4_flag = 0;

void setTimer0 (int duration){
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <setTimer0+0x20>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <setTimer0+0x24>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000098 	.word	0x20000098
 8001c48:	200000ac 	.word	0x200000ac

08001c4c <setTimer1>:
void setTimer1 (int duration){
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001c54:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <setTimer1+0x20>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <setTimer1+0x24>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2000009c 	.word	0x2000009c
 8001c70:	200000b0 	.word	0x200000b0

08001c74 <setTimer2>:
void setTimer2 (int duration){
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001c7c:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <setTimer2+0x20>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <setTimer2+0x24>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	200000a0 	.word	0x200000a0
 8001c98:	200000b4 	.word	0x200000b4

08001c9c <setTimer3>:
void setTimer3 (int duration){
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <setTimer3+0x20>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <setTimer3+0x24>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	200000a4 	.word	0x200000a4
 8001cc0:	200000b8 	.word	0x200000b8

08001cc4 <setTimer4>:
void setTimer4 (int duration){
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001ccc:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <setTimer4+0x20>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <setTimer4+0x24>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	200000a8 	.word	0x200000a8
 8001ce8:	200000bc 	.word	0x200000bc

08001cec <timerRun>:

void timerRun(){
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
	if (timer0_counter > 0){
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <timerRun+0xac>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	dd0b      	ble.n	8001d10 <timerRun+0x24>
		timer0_counter--;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <timerRun+0xac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	4a26      	ldr	r2, [pc, #152]	; (8001d98 <timerRun+0xac>)
 8001d00:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0) timer0_flag = 1;
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <timerRun+0xac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	dc02      	bgt.n	8001d10 <timerRun+0x24>
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <timerRun+0xb0>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0){
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <timerRun+0xb4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	dd0b      	ble.n	8001d30 <timerRun+0x44>
		timer1_counter--;
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <timerRun+0xb4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <timerRun+0xb4>)
 8001d20:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) timer1_flag = 1;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <timerRun+0xb4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	dc02      	bgt.n	8001d30 <timerRun+0x44>
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <timerRun+0xb8>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0){
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <timerRun+0xbc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	dd0b      	ble.n	8001d50 <timerRun+0x64>
		timer2_counter--;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <timerRun+0xbc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <timerRun+0xbc>)
 8001d40:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) timer2_flag = 1;
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <timerRun+0xbc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	dc02      	bgt.n	8001d50 <timerRun+0x64>
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <timerRun+0xc0>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0){
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <timerRun+0xc4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	dd0b      	ble.n	8001d70 <timerRun+0x84>
		timer3_counter--;
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <timerRun+0xc4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <timerRun+0xc4>)
 8001d60:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) timer3_flag = 1;
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <timerRun+0xc4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	dc02      	bgt.n	8001d70 <timerRun+0x84>
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <timerRun+0xc8>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0){
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <timerRun+0xcc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	dd0b      	ble.n	8001d90 <timerRun+0xa4>
		timer4_counter--;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <timerRun+0xcc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <timerRun+0xcc>)
 8001d80:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) timer4_flag = 1;
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <timerRun+0xcc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	dc02      	bgt.n	8001d90 <timerRun+0xa4>
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <timerRun+0xd0>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
	}
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000098 	.word	0x20000098
 8001d9c:	200000ac 	.word	0x200000ac
 8001da0:	2000009c 	.word	0x2000009c
 8001da4:	200000b0 	.word	0x200000b0
 8001da8:	200000a0 	.word	0x200000a0
 8001dac:	200000b4 	.word	0x200000b4
 8001db0:	200000a4 	.word	0x200000a4
 8001db4:	200000b8 	.word	0x200000b8
 8001db8:	200000a8 	.word	0x200000a8
 8001dbc:	200000bc 	.word	0x200000bc

08001dc0 <endTimer0>:

int endTimer0(){
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
	if (timer0_flag == 1){
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <endTimer0+0x20>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d104      	bne.n	8001dd6 <endTimer0+0x16>
		timer0_flag = 0;
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <endTimer0+0x20>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
		return 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <endTimer0+0x18>
	}else return 0;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	200000ac 	.word	0x200000ac

08001de4 <endTimer1>:

int endTimer1(){
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	if (timer1_flag == 1){
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <endTimer1+0x20>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d104      	bne.n	8001dfa <endTimer1+0x16>
		timer1_flag = 0;
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <endTimer1+0x20>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
		return 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <endTimer1+0x18>
	}else return 0;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	200000b0 	.word	0x200000b0

08001e08 <endTimer2>:

int endTimer2(){
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	if (timer2_flag == 1){
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <endTimer2+0x20>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d104      	bne.n	8001e1e <endTimer2+0x16>
		timer2_flag = 0;
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <endTimer2+0x20>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
		return 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <endTimer2+0x18>
	}else return 0;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	200000b4 	.word	0x200000b4

08001e2c <endTimer3>:

int endTimer3(){
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
	if (timer3_flag == 1){
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <endTimer3+0x20>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d104      	bne.n	8001e42 <endTimer3+0x16>
		timer3_flag = 0;
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <endTimer3+0x20>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
		return 1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <endTimer3+0x18>
	}else return 0;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	200000b8 	.word	0x200000b8

08001e50 <endTimer4>:

int endTimer4(){
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	if (timer4_flag == 1){
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <endTimer4+0x20>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d104      	bne.n	8001e66 <endTimer4+0x16>
		timer4_flag = 0;
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <endTimer4+0x20>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
		return 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <endTimer4+0x18>
	}else return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	200000bc 	.word	0x200000bc

08001e74 <clearTimer1>:
void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 0;
}

void clearTimer1(){
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <clearTimer1+0x18>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <clearTimer1+0x1c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	2000009c 	.word	0x2000009c
 8001e90:	200000b0 	.word	0x200000b0

08001e94 <clearTimer2>:

void clearTimer2(){
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <clearTimer2+0x18>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <clearTimer2+0x1c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	200000a0 	.word	0x200000a0
 8001eb0:	200000b4 	.word	0x200000b4

08001eb4 <clearTimer3>:

void clearTimer3(){
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <clearTimer3+0x18>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <clearTimer3+0x1c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	200000a4 	.word	0x200000a4
 8001ed0:	200000b8 	.word	0x200000b8

08001ed4 <clearTimer4>:

void clearTimer4(){
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	timer4_counter = 0;
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <clearTimer4+0x18>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <clearTimer4+0x1c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	200000a8 	.word	0x200000a8
 8001ef0:	200000bc 	.word	0x200000bc

08001ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef4:	f7ff fe90 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001efa:	490c      	ldr	r1, [pc, #48]	; (8001f2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f10:	4c09      	ldr	r4, [pc, #36]	; (8001f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f001 faf9 	bl	8003514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f22:	f7ff f8ab 	bl	800107c <main>
  bx lr
 8001f26:	4770      	bx	lr
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001f30:	080035b0 	.word	0x080035b0
  ldr r2, =_sbss
 8001f34:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001f38:	20000120 	.word	0x20000120

08001f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC1_2_IRQHandler>
	...

08001f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_Init+0x28>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_Init+0x28>)
 8001f4a:	f043 0310 	orr.w	r3, r3, #16
 8001f4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 f923 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f56:	200f      	movs	r0, #15
 8001f58:	f000 f808 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5c:	f7ff fdd4 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000

08001f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x54>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f93b 	bl	8002206 <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 f903 	bl	80021b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <HAL_InitTick+0x5c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000040 	.word	0x20000040
 8001fc4:	20000048 	.word	0x20000048
 8001fc8:	20000044 	.word	0x20000044

08001fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x1c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_IncTick+0x20>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a03      	ldr	r2, [pc, #12]	; (8001fec <HAL_IncTick+0x20>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000048 	.word	0x20000048
 8001fec:	2000011c 	.word	0x2000011c

08001ff0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <HAL_GetTick+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	2000011c 	.word	0x2000011c

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4906      	ldr	r1, [pc, #24]	; (800209c <__NVIC_EnableIRQ+0x34>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f7ff ff90 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff2d 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff42 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff90 	bl	80020f4 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5f 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff35 	bl	8002068 <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa2 	bl	8002158 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b08b      	sub	sp, #44	; 0x2c
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002232:	e148      	b.n	80024c6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002234:	2201      	movs	r2, #1
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 8137 	bne.w	80024c0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4aa3      	ldr	r2, [pc, #652]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d05e      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 800225c:	4aa1      	ldr	r2, [pc, #644]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d875      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 8002262:	4aa1      	ldr	r2, [pc, #644]	; (80024e8 <HAL_GPIO_Init+0x2c8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d058      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 8002268:	4a9f      	ldr	r2, [pc, #636]	; (80024e8 <HAL_GPIO_Init+0x2c8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d86f      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 800226e:	4a9f      	ldr	r2, [pc, #636]	; (80024ec <HAL_GPIO_Init+0x2cc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d052      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 8002274:	4a9d      	ldr	r2, [pc, #628]	; (80024ec <HAL_GPIO_Init+0x2cc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d869      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 800227a:	4a9d      	ldr	r2, [pc, #628]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d04c      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 8002280:	4a9b      	ldr	r2, [pc, #620]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d863      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 8002286:	4a9b      	ldr	r2, [pc, #620]	; (80024f4 <HAL_GPIO_Init+0x2d4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d046      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 800228c:	4a99      	ldr	r2, [pc, #612]	; (80024f4 <HAL_GPIO_Init+0x2d4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d85d      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 8002292:	2b12      	cmp	r3, #18
 8002294:	d82a      	bhi.n	80022ec <HAL_GPIO_Init+0xcc>
 8002296:	2b12      	cmp	r3, #18
 8002298:	d859      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <HAL_GPIO_Init+0x80>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	0800231b 	.word	0x0800231b
 80022a4:	080022f5 	.word	0x080022f5
 80022a8:	08002307 	.word	0x08002307
 80022ac:	08002349 	.word	0x08002349
 80022b0:	0800234f 	.word	0x0800234f
 80022b4:	0800234f 	.word	0x0800234f
 80022b8:	0800234f 	.word	0x0800234f
 80022bc:	0800234f 	.word	0x0800234f
 80022c0:	0800234f 	.word	0x0800234f
 80022c4:	0800234f 	.word	0x0800234f
 80022c8:	0800234f 	.word	0x0800234f
 80022cc:	0800234f 	.word	0x0800234f
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	0800234f 	.word	0x0800234f
 80022d8:	0800234f 	.word	0x0800234f
 80022dc:	0800234f 	.word	0x0800234f
 80022e0:	0800234f 	.word	0x0800234f
 80022e4:	080022fd 	.word	0x080022fd
 80022e8:	08002311 	.word	0x08002311
 80022ec:	4a82      	ldr	r2, [pc, #520]	; (80024f8 <HAL_GPIO_Init+0x2d8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022f2:	e02c      	b.n	800234e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	623b      	str	r3, [r7, #32]
          break;
 80022fa:	e029      	b.n	8002350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	3304      	adds	r3, #4
 8002302:	623b      	str	r3, [r7, #32]
          break;
 8002304:	e024      	b.n	8002350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	3308      	adds	r3, #8
 800230c:	623b      	str	r3, [r7, #32]
          break;
 800230e:	e01f      	b.n	8002350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	330c      	adds	r3, #12
 8002316:	623b      	str	r3, [r7, #32]
          break;
 8002318:	e01a      	b.n	8002350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002322:	2304      	movs	r3, #4
 8002324:	623b      	str	r3, [r7, #32]
          break;
 8002326:	e013      	b.n	8002350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002330:	2308      	movs	r3, #8
 8002332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	611a      	str	r2, [r3, #16]
          break;
 800233a:	e009      	b.n	8002350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800233c:	2308      	movs	r3, #8
 800233e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	615a      	str	r2, [r3, #20]
          break;
 8002346:	e003      	b.n	8002350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
          break;
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x130>
          break;
 800234e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2bff      	cmp	r3, #255	; 0xff
 8002354:	d801      	bhi.n	800235a <HAL_GPIO_Init+0x13a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	e001      	b.n	800235e <HAL_GPIO_Init+0x13e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2bff      	cmp	r3, #255	; 0xff
 8002364:	d802      	bhi.n	800236c <HAL_GPIO_Init+0x14c>
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	e002      	b.n	8002372 <HAL_GPIO_Init+0x152>
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	3b08      	subs	r3, #8
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	210f      	movs	r1, #15
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	401a      	ands	r2, r3
 8002384:	6a39      	ldr	r1, [r7, #32]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	431a      	orrs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8090 	beq.w	80024c0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023a0:	4b56      	ldr	r3, [pc, #344]	; (80024fc <HAL_GPIO_Init+0x2dc>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a55      	ldr	r2, [pc, #340]	; (80024fc <HAL_GPIO_Init+0x2dc>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_GPIO_Init+0x2dc>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023b8:	4a51      	ldr	r2, [pc, #324]	; (8002500 <HAL_GPIO_Init+0x2e0>)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a49      	ldr	r2, [pc, #292]	; (8002504 <HAL_GPIO_Init+0x2e4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00d      	beq.n	8002400 <HAL_GPIO_Init+0x1e0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a48      	ldr	r2, [pc, #288]	; (8002508 <HAL_GPIO_Init+0x2e8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <HAL_GPIO_Init+0x1dc>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a47      	ldr	r2, [pc, #284]	; (800250c <HAL_GPIO_Init+0x2ec>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_GPIO_Init+0x1d8>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e004      	b.n	8002402 <HAL_GPIO_Init+0x1e2>
 80023f8:	2303      	movs	r3, #3
 80023fa:	e002      	b.n	8002402 <HAL_GPIO_Init+0x1e2>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_GPIO_Init+0x1e2>
 8002400:	2300      	movs	r3, #0
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	f002 0203 	and.w	r2, r2, #3
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	4093      	lsls	r3, r2
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002412:	493b      	ldr	r1, [pc, #236]	; (8002500 <HAL_GPIO_Init+0x2e0>)
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800242c:	4b38      	ldr	r3, [pc, #224]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	4937      	ldr	r1, [pc, #220]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800243a:	4b35      	ldr	r3, [pc, #212]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	43db      	mvns	r3, r3
 8002442:	4933      	ldr	r1, [pc, #204]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 8002444:	4013      	ands	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002454:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	492d      	ldr	r1, [pc, #180]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	60cb      	str	r3, [r1, #12]
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	43db      	mvns	r3, r3
 800246a:	4929      	ldr	r1, [pc, #164]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 800246c:	4013      	ands	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4923      	ldr	r1, [pc, #140]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	43db      	mvns	r3, r3
 8002492:	491f      	ldr	r1, [pc, #124]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 8002494:	4013      	ands	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4919      	ldr	r1, [pc, #100]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4915      	ldr	r1, [pc, #84]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	3301      	adds	r3, #1
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f47f aeaf 	bne.w	8002234 <HAL_GPIO_Init+0x14>
  }
}
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	372c      	adds	r7, #44	; 0x2c
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	10320000 	.word	0x10320000
 80024e8:	10310000 	.word	0x10310000
 80024ec:	10220000 	.word	0x10220000
 80024f0:	10210000 	.word	0x10210000
 80024f4:	10120000 	.word	0x10120000
 80024f8:	10110000 	.word	0x10110000
 80024fc:	40021000 	.word	0x40021000
 8002500:	40010000 	.word	0x40010000
 8002504:	40010800 	.word	0x40010800
 8002508:	40010c00 	.word	0x40010c00
 800250c:	40011000 	.word	0x40011000
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e001      	b.n	8002536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]
 800254e:	4613      	mov	r3, r2
 8002550:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002552:	787b      	ldrb	r3, [r7, #1]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002558:	887a      	ldrh	r2, [r7, #2]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800255e:	e003      	b.n	8002568 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	041a      	lsls	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	611a      	str	r2, [r3, #16]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002584:	887a      	ldrh	r2, [r7, #2]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	041a      	lsls	r2, r3, #16
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43d9      	mvns	r1, r3
 8002590:	887b      	ldrh	r3, [r7, #2]
 8002592:	400b      	ands	r3, r1
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	611a      	str	r2, [r3, #16]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e26c      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8087 	beq.w	80026d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c4:	4b92      	ldr	r3, [pc, #584]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d00c      	beq.n	80025ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d0:	4b8f      	ldr	r3, [pc, #572]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d112      	bne.n	8002602 <HAL_RCC_OscConfig+0x5e>
 80025dc:	4b8c      	ldr	r3, [pc, #560]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d10b      	bne.n	8002602 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ea:	4b89      	ldr	r3, [pc, #548]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d06c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x12c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d168      	bne.n	80026d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e246      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x76>
 800260c:	4b80      	ldr	r3, [pc, #512]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a7f      	ldr	r2, [pc, #508]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	e02e      	b.n	8002678 <HAL_RCC_OscConfig+0xd4>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x98>
 8002622:	4b7b      	ldr	r3, [pc, #492]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7a      	ldr	r2, [pc, #488]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b78      	ldr	r3, [pc, #480]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a77      	ldr	r2, [pc, #476]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01d      	b.n	8002678 <HAL_RCC_OscConfig+0xd4>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0xbc>
 8002646:	4b72      	ldr	r3, [pc, #456]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a71      	ldr	r2, [pc, #452]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800264c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6e      	ldr	r2, [pc, #440]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0xd4>
 8002660:	4b6b      	ldr	r3, [pc, #428]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a6a      	ldr	r2, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b68      	ldr	r3, [pc, #416]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a67      	ldr	r2, [pc, #412]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002676:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff fcb6 	bl	8001ff0 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7ff fcb2 	bl	8001ff0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1fa      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0xe4>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff fca2 	bl	8001ff0 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff fc9e 	bl	8001ff0 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e1e6      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x10c>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d063      	beq.n	80027a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026de:	4b4c      	ldr	r3, [pc, #304]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ea:	4b49      	ldr	r3, [pc, #292]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d11c      	bne.n	8002730 <HAL_RCC_OscConfig+0x18c>
 80026f6:	4b46      	ldr	r3, [pc, #280]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d116      	bne.n	8002730 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	4b43      	ldr	r3, [pc, #268]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x176>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e1ba      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4939      	ldr	r1, [pc, #228]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	e03a      	b.n	80027a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002738:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_RCC_OscConfig+0x270>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7ff fc57 	bl	8001ff0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002746:	f7ff fc53 	bl	8001ff0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e19b      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4927      	ldr	r1, [pc, #156]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
 8002778:	e015      	b.n	80027a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <HAL_RCC_OscConfig+0x270>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff fc36 	bl	8001ff0 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002788:	f7ff fc32 	bl	8001ff0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e17a      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d03a      	beq.n	8002828 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d019      	beq.n	80027ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_RCC_OscConfig+0x274>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c0:	f7ff fc16 	bl	8001ff0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c8:	f7ff fc12 	bl	8001ff0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e15a      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f000 fa9a 	bl	8002d20 <RCC_Delay>
 80027ec:	e01c      	b.n	8002828 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_RCC_OscConfig+0x274>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7ff fbfc 	bl	8001ff0 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fa:	e00f      	b.n	800281c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fc:	f7ff fbf8 	bl	8001ff0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d908      	bls.n	800281c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e140      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	42420000 	.word	0x42420000
 8002818:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	4b9e      	ldr	r3, [pc, #632]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e9      	bne.n	80027fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a6 	beq.w	8002982 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283a:	4b97      	ldr	r3, [pc, #604]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	4b94      	ldr	r3, [pc, #592]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a93      	ldr	r2, [pc, #588]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	61d3      	str	r3, [r2, #28]
 8002852:	4b91      	ldr	r3, [pc, #580]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b8e      	ldr	r3, [pc, #568]	; (8002a9c <HAL_RCC_OscConfig+0x4f8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	4b8b      	ldr	r3, [pc, #556]	; (8002a9c <HAL_RCC_OscConfig+0x4f8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a8a      	ldr	r2, [pc, #552]	; (8002a9c <HAL_RCC_OscConfig+0x4f8>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7ff fbb9 	bl	8001ff0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7ff fbb5 	bl	8001ff0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0fd      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b81      	ldr	r3, [pc, #516]	; (8002a9c <HAL_RCC_OscConfig+0x4f8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x312>
 80028a8:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4a7a      	ldr	r2, [pc, #488]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6213      	str	r3, [r2, #32]
 80028b4:	e02d      	b.n	8002912 <HAL_RCC_OscConfig+0x36e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x334>
 80028be:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4a75      	ldr	r2, [pc, #468]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6213      	str	r3, [r2, #32]
 80028ca:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4a72      	ldr	r2, [pc, #456]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	6213      	str	r3, [r2, #32]
 80028d6:	e01c      	b.n	8002912 <HAL_RCC_OscConfig+0x36e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_OscConfig+0x356>
 80028e0:	4b6d      	ldr	r3, [pc, #436]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4a6c      	ldr	r2, [pc, #432]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6213      	str	r3, [r2, #32]
 80028ec:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4a69      	ldr	r2, [pc, #420]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	e00b      	b.n	8002912 <HAL_RCC_OscConfig+0x36e>
 80028fa:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a66      	ldr	r2, [pc, #408]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6213      	str	r3, [r2, #32]
 8002906:	4b64      	ldr	r3, [pc, #400]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a63      	ldr	r2, [pc, #396]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291a:	f7ff fb69 	bl	8001ff0 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7ff fb65 	bl	8001ff0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0ab      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ee      	beq.n	8002922 <HAL_RCC_OscConfig+0x37e>
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7ff fb53 	bl	8001ff0 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7ff fb4f 	bl	8001ff0 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e095      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ee      	bne.n	800294e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4a47      	ldr	r2, [pc, #284]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002980:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8081 	beq.w	8002a8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d061      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d146      	bne.n	8002a2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a0:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_OscConfig+0x4fc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7ff fb23 	bl	8001ff0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7ff fb1f 	bl	8001ff0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e067      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c0:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d108      	bne.n	80029e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029d6:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	492d      	ldr	r1, [pc, #180]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a19      	ldr	r1, [r3, #32]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	430b      	orrs	r3, r1
 80029fa:	4927      	ldr	r1, [pc, #156]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_RCC_OscConfig+0x4fc>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7ff faf3 	bl	8001ff0 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff faef 	bl	8001ff0 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e037      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x46a>
 8002a2c:	e02f      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_RCC_OscConfig+0x4fc>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff fadc 	bl	8001ff0 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff fad8 	bl	8001ff0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e020      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x498>
 8002a5a:	e018      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e013      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	42420060 	.word	0x42420060

08002aa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0d0      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4965      	ldr	r1, [pc, #404]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b8      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	494d      	ldr	r1, [pc, #308]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d040      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d115      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b62:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e073      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06b      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4936      	ldr	r1, [pc, #216]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b94:	f7ff fa2c 	bl	8001ff0 <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7ff fa28 	bl	8001ff0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e053      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d210      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4922      	ldr	r1, [pc, #136]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e032      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4916      	ldr	r1, [pc, #88]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	490e      	ldr	r1, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c32:	f000 f821 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1cc>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x1d0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f98a 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08003584 	.word	0x08003584
 8002c70:	20000040 	.word	0x20000040
 8002c74:	20000044 	.word	0x20000044

08002c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d002      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x36>
 8002ca6:	e027      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002caa:	613b      	str	r3, [r7, #16]
      break;
 8002cac:	e027      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d010      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	0c5b      	lsrs	r3, r3, #17
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cda:	fb02 f203 	mul.w	r2, r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e004      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	613b      	str	r3, [r7, #16]
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfa:	613b      	str	r3, [r7, #16]
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	693b      	ldr	r3, [r7, #16]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	007a1200 	.word	0x007a1200
 8002d14:	08003594 	.word	0x08003594
 8002d18:	080035a4 	.word	0x080035a4
 8002d1c:	003d0900 	.word	0x003d0900

08002d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <RCC_Delay+0x34>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <RCC_Delay+0x38>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0a5b      	lsrs	r3, r3, #9
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d3c:	bf00      	nop
  }
  while (Delay --);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1e5a      	subs	r2, r3, #1
 8002d42:	60fa      	str	r2, [r7, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f9      	bne.n	8002d3c <RCC_Delay+0x1c>
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	20000040 	.word	0x20000040
 8002d58:	10624dd3 	.word	0x10624dd3

08002d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e041      	b.n	8002df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe fef2 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 fa56 	bl	800324c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d001      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e035      	b.n	8002e80 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <HAL_TIM_Base_Start_IT+0x90>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_TIM_Base_Start_IT+0x4e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3e:	d004      	beq.n	8002e4a <HAL_TIM_Base_Start_IT+0x4e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <HAL_TIM_Base_Start_IT+0x94>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d111      	bne.n	8002e6e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d010      	beq.n	8002e7e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	e007      	b.n	8002e7e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40000400 	.word	0x40000400

08002e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d020      	beq.n	8002ef8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01b      	beq.n	8002ef8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0202 	mvn.w	r2, #2
 8002ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f998 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8002ee4:	e005      	b.n	8002ef2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f98b 	bl	8003202 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f99a 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d020      	beq.n	8002f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01b      	beq.n	8002f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0204 	mvn.w	r2, #4
 8002f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f972 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f965 	bl	8003202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f974 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d020      	beq.n	8002f90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0208 	mvn.w	r2, #8
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2204      	movs	r2, #4
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f94c 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f93f 	bl	8003202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f94e 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d020      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01b      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0210 	mvn.w	r2, #16
 8002fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f926 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f919 	bl	8003202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f928 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00c      	beq.n	8003000 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0201 	mvn.w	r2, #1
 8002ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe f944 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa6f 	bl	8003502 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8f8 	bl	8003238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0220 	mvn.w	r2, #32
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa42 	bl	80034f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_TIM_ConfigClockSource+0x1c>
 800308c:	2302      	movs	r3, #2
 800308e:	e0b4      	b.n	80031fa <HAL_TIM_ConfigClockSource+0x186>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c8:	d03e      	beq.n	8003148 <HAL_TIM_ConfigClockSource+0xd4>
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ce:	f200 8087 	bhi.w	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d6:	f000 8086 	beq.w	80031e6 <HAL_TIM_ConfigClockSource+0x172>
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030de:	d87f      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030e0:	2b70      	cmp	r3, #112	; 0x70
 80030e2:	d01a      	beq.n	800311a <HAL_TIM_ConfigClockSource+0xa6>
 80030e4:	2b70      	cmp	r3, #112	; 0x70
 80030e6:	d87b      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030e8:	2b60      	cmp	r3, #96	; 0x60
 80030ea:	d050      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x11a>
 80030ec:	2b60      	cmp	r3, #96	; 0x60
 80030ee:	d877      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030f0:	2b50      	cmp	r3, #80	; 0x50
 80030f2:	d03c      	beq.n	800316e <HAL_TIM_ConfigClockSource+0xfa>
 80030f4:	2b50      	cmp	r3, #80	; 0x50
 80030f6:	d873      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d058      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0x13a>
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d86f      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003100:	2b30      	cmp	r3, #48	; 0x30
 8003102:	d064      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x15a>
 8003104:	2b30      	cmp	r3, #48	; 0x30
 8003106:	d86b      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b20      	cmp	r3, #32
 800310a:	d060      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x15a>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d867      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d05c      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x15a>
 8003114:	2b10      	cmp	r3, #16
 8003116:	d05a      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x15a>
 8003118:	e062      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6899      	ldr	r1, [r3, #8]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f000 f96a 	bl	8003402 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800313c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	609a      	str	r2, [r3, #8]
      break;
 8003146:	e04f      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	6899      	ldr	r1, [r3, #8]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f000 f953 	bl	8003402 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800316a:	609a      	str	r2, [r3, #8]
      break;
 800316c:	e03c      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	461a      	mov	r2, r3
 800317c:	f000 f8ca 	bl	8003314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2150      	movs	r1, #80	; 0x50
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f921 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 800318c:	e02c      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	461a      	mov	r2, r3
 800319c:	f000 f8e8 	bl	8003370 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2160      	movs	r1, #96	; 0x60
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f911 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 80031ac:	e01c      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 f8aa 	bl	8003314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2140      	movs	r1, #64	; 0x40
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f901 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 80031cc:	e00c      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f000 f8f8 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 80031de:	e003      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      break;
 80031e4:	e000      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
	...

0800324c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a2b      	ldr	r2, [pc, #172]	; (800330c <TIM_Base_SetConfig+0xc0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <TIM_Base_SetConfig+0x28>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d003      	beq.n	8003274 <TIM_Base_SetConfig+0x28>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a28      	ldr	r2, [pc, #160]	; (8003310 <TIM_Base_SetConfig+0xc4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d108      	bne.n	8003286 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a20      	ldr	r2, [pc, #128]	; (800330c <TIM_Base_SetConfig+0xc0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x52>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x52>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <TIM_Base_SetConfig+0xc4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0d      	ldr	r2, [pc, #52]	; (800330c <TIM_Base_SetConfig+0xc0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f023 0201 	bic.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]
  }
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40000400 	.word	0x40000400

08003314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f023 0201 	bic.w	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800333e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f023 030a 	bic.w	r3, r3, #10
 8003350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0210 	bic.w	r2, r3, #16
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800339a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	031b      	lsls	r3, r3, #12
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	621a      	str	r2, [r3, #32]
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f043 0307 	orr.w	r3, r3, #7
 80033f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003402:	b480      	push	{r7}
 8003404:	b087      	sub	sp, #28
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800341c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	021a      	lsls	r2, r3, #8
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	431a      	orrs	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4313      	orrs	r3, r2
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	609a      	str	r2, [r3, #8]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003454:	2302      	movs	r3, #2
 8003456:	e041      	b.n	80034dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d004      	beq.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a10      	ldr	r2, [pc, #64]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10c      	bne.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40000400 	.word	0x40000400

080034f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <__libc_init_array>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	2600      	movs	r6, #0
 8003518:	4d0c      	ldr	r5, [pc, #48]	; (800354c <__libc_init_array+0x38>)
 800351a:	4c0d      	ldr	r4, [pc, #52]	; (8003550 <__libc_init_array+0x3c>)
 800351c:	1b64      	subs	r4, r4, r5
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	42a6      	cmp	r6, r4
 8003522:	d109      	bne.n	8003538 <__libc_init_array+0x24>
 8003524:	f000 f822 	bl	800356c <_init>
 8003528:	2600      	movs	r6, #0
 800352a:	4d0a      	ldr	r5, [pc, #40]	; (8003554 <__libc_init_array+0x40>)
 800352c:	4c0a      	ldr	r4, [pc, #40]	; (8003558 <__libc_init_array+0x44>)
 800352e:	1b64      	subs	r4, r4, r5
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	42a6      	cmp	r6, r4
 8003534:	d105      	bne.n	8003542 <__libc_init_array+0x2e>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f855 3b04 	ldr.w	r3, [r5], #4
 800353c:	4798      	blx	r3
 800353e:	3601      	adds	r6, #1
 8003540:	e7ee      	b.n	8003520 <__libc_init_array+0xc>
 8003542:	f855 3b04 	ldr.w	r3, [r5], #4
 8003546:	4798      	blx	r3
 8003548:	3601      	adds	r6, #1
 800354a:	e7f2      	b.n	8003532 <__libc_init_array+0x1e>
 800354c:	080035a8 	.word	0x080035a8
 8003550:	080035a8 	.word	0x080035a8
 8003554:	080035a8 	.word	0x080035a8
 8003558:	080035ac 	.word	0x080035ac

0800355c <memset>:
 800355c:	4603      	mov	r3, r0
 800355e:	4402      	add	r2, r0
 8003560:	4293      	cmp	r3, r2
 8003562:	d100      	bne.n	8003566 <memset+0xa>
 8003564:	4770      	bx	lr
 8003566:	f803 1b01 	strb.w	r1, [r3], #1
 800356a:	e7f9      	b.n	8003560 <memset+0x4>

0800356c <_init>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr

08003578 <_fini>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr
